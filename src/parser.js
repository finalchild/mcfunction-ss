/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function() {return results},
      peg$c1 = function() {result(null, "command", [
          "advancement",
          "clear",
          "clone",
          "data",
          "datapack",
          "defaultgamemode",
          "difficulty",
          "effect",
          "execute",
          "experience",
          "fill",
          "function",
          "gamemode",
          "gamerule",
          "help",
          "locate",
          "me",
          "msg",
          "particle",
          "playsound",
          "recipe",
          "reload",
          "replaceitem",
          "say",
          "scoreboard",
          "seed",
          "stopsound",
          "summon",
          "tag",
          "team",
          "teleport",
          "tell",
          "tellraw",
          "time",
          "title",
          "tp",
          "trigger",
          "w",
          "weather",
          "worldborder",
          "xp"
          ])},
      peg$c2 = "advancement",
      peg$c3 = peg$literalExpectation("advancement", false),
      peg$c4 = "grant",
      peg$c5 = peg$literalExpectation("grant", false),
      peg$c6 = "revoke",
      peg$c7 = peg$literalExpectation("revoke", false),
      peg$c8 = "only",
      peg$c9 = peg$literalExpectation("only", false),
      peg$c10 = function() {result("[<criterion>]", "criterion", null)},
      peg$c11 = function() {result("<advancement> [<criterion>]", "advancement", null)},
      peg$c12 = "from",
      peg$c13 = peg$literalExpectation("from", false),
      peg$c14 = "through",
      peg$c15 = peg$literalExpectation("through", false),
      peg$c16 = "until",
      peg$c17 = peg$literalExpectation("until", false),
      peg$c18 = function() {result("<advancement>", "advancement", null)},
      peg$c19 = function() {result(null, "literal", ["everything", "from", "only", "through", "until"])},
      peg$c20 = function() {result("<targets> (everything|from|only|through|until)", "players", null)},
      peg$c21 = function() {result(null, "literal", ["grant", "revoke"])},
      peg$c22 = "clear",
      peg$c23 = peg$literalExpectation("clear", false),
      peg$c24 = function() {result("[<maxCount>]", "integer", null)},
      peg$c25 = function() {result("[<item>] [<maxCount>]", "item", null)},
      peg$c26 = function() {result("<targets> [<item>]", "item", null)},
      peg$c27 = "clone",
      peg$c28 = peg$literalExpectation("clone", false),
      peg$c29 = "filtered",
      peg$c30 = peg$literalExpectation("filtered", false),
      peg$c31 = function() {result(null, "literal", ["force", "move", "normal"])},
      peg$c32 = function() {result("<filter> [force|move|normal]", "block", null)},
      peg$c33 = "masked",
      peg$c34 = peg$literalExpectation("masked", false),
      peg$c35 = "replace",
      peg$c36 = peg$literalExpectation("replace", false),
      peg$c37 = function() {result(null, "literal", ["filtered", "masked", "replace"])},
      peg$c38 = function() {result("<destination> [filtered|masked|replace]", "block_pos", null)},
      peg$c39 = function() {result("<end> <destination> [filtered|masked|replace]", "block_pos", null)},
      peg$c40 = function() {result("<begin> <end> <destination> [filtered|masked|replace]", "block_pos", null)},
      peg$c41 = "data",
      peg$c42 = peg$literalExpectation("data", false),
      peg$c43 = "get",
      peg$c44 = peg$literalExpectation("get", false),
      peg$c45 = "block",
      peg$c46 = peg$literalExpectation("block", false),
      peg$c47 = function() {result("[<scale>]", "float", null)},
      peg$c48 = function() {result("[<path>] [<scale>]", "nbt_path", null)},
      peg$c49 = function() {result("<pos> [<path>]", "block_pos", null)},
      peg$c50 = "entity",
      peg$c51 = peg$literalExpectation("entity", false),
      peg$c52 = function() {result("<target> [<path>]", "entity", null)},
      peg$c53 = function() {result(null, "literal", ["block", "entity"])},
      peg$c54 = "merge",
      peg$c55 = peg$literalExpectation("merge", false),
      peg$c56 = "remove",
      peg$c57 = peg$literalExpectation("remove", false),
      peg$c58 = function() {result("[<nbt>]", "nbt", null)},
      peg$c59 = function() {result("<pos> [<nbt>]", "block_pos", null)},
      peg$c60 = function() {result("<target> [<nbt>]", "entity", null)},
      peg$c61 = function() {result(null, "literal", ["get", "merge", "remove"])},
      peg$c62 = "datapack",
      peg$c63 = peg$literalExpectation("datapack", false),
      peg$c64 = "disable",
      peg$c65 = peg$literalExpectation("disable", false),
      peg$c66 = function() {result("<name>", "string", null)},
      peg$c67 = "enable",
      peg$c68 = peg$literalExpectation("enable", false),
      peg$c69 = "after",
      peg$c70 = peg$literalExpectation("after", false),
      peg$c71 = "before",
      peg$c72 = peg$literalExpectation("before", false),
      peg$c73 = function() {result("<existing>", "string", null)},
      peg$c74 = function() {result(null, "literal", ["after", "before", "first", "last"])},
      peg$c75 = "list",
      peg$c76 = peg$literalExpectation("list", false),
      peg$c77 = function(_) {result(null, "literal", ["available", "enabled"])},
      peg$c78 = function() {result(null, "literal", ["disable", "enable", "list"])},
      peg$c79 = "defaultgamemode",
      peg$c80 = peg$literalExpectation("defaultgamemode", false),
      peg$c81 = function() {result(null, "literal", ["adventure", "creative", "spectator", "survival"])},
      peg$c82 = "difficulty",
      peg$c83 = peg$literalExpectation("difficulty", false),
      peg$c84 = function() {result(null, "literal", ["easy", "hard", "normal", "peaceful"])},
      peg$c85 = "effect",
      peg$c86 = peg$literalExpectation("effect", false),
      peg$c87 = function() {result("[<effect>]", "mob_effect", null)},
      peg$c88 = function() {result("<targets> [<effect>]", "entities", null)},
      peg$c89 = "give",
      peg$c90 = peg$literalExpectation("give", false),
      peg$c91 = function() {result("[<hideParticles>]", "bool", null)},
      peg$c92 = function() {result("[<amplifier>] [<hideParticles>]", "integer", null)},
      peg$c93 = function() {result("[<seconds>] [<amplifier>]", "integer", null)},
      peg$c94 = function() {result("[<effect>] [<seconds>]", "mob_effect", null)},
      peg$c95 = function() {result(null, "literal", ["clear", "give"])},
      peg$c96 = "execute",
      peg$c97 = peg$literalExpectation("execute", false),
      peg$c98 = function() {result(null, "literal", ["align", "as", "at", "if", "offset", "run", "store", "unless"])},
      peg$c99 = "align",
      peg$c100 = peg$literalExpectation("align", false),
      peg$c101 = function() {result("<axes> -> execute", "axes", null)},
      peg$c102 = "as",
      peg$c103 = peg$literalExpectation("as", false),
      peg$c104 = function() {result("<targets> -> execute", "entities", null)},
      peg$c105 = "at",
      peg$c106 = peg$literalExpectation("at", false),
      peg$c107 = "if",
      peg$c108 = peg$literalExpectation("if", false),
      peg$c109 = function() {result("<block> -> execute", "block", null)},
      peg$c110 = function() {result("<pos> <block>", "block_pos", null)},
      peg$c111 = function() {result("<entities> -> execute", "entities", null)},
      peg$c112 = "score",
      peg$c113 = peg$literalExpectation("score", false),
      peg$c114 = function() {result("<sourceObjective> -> execute", "objective", null)},
      peg$c115 = function() {result("<source> <sourceObjective>", "entity", null)},
      peg$c116 = function() {result(null, "literal", ["<", "<=", "=", ">", ">="])},
      peg$c117 = function() {result("<targetObjective> (<|<=|=|>|>=)", "objective", null)},
      peg$c118 = function() {result("<target> <targetObjective> (<|<=|=|>|>=)", "entity", null)},
      peg$c119 = function() {result(null, "literal", ["block", "blocks", "entity", "score"])},
      peg$c120 = "offset",
      peg$c121 = peg$literalExpectation("offset", false),
      peg$c122 = function() {result("<pos> -> execute", "vec3", null)},
      peg$c123 = "run",
      peg$c124 = peg$literalExpectation("run", false),
      peg$c125 = "store",
      peg$c126 = peg$literalExpectation("store", false),
      peg$c127 = "result",
      peg$c128 = peg$literalExpectation("result", false),
      peg$c129 = "success",
      peg$c130 = peg$literalExpectation("success", false),
      peg$c131 = "byte",
      peg$c132 = peg$literalExpectation("byte", false),
      peg$c133 = "double",
      peg$c134 = peg$literalExpectation("double", false),
      peg$c135 = "float",
      peg$c136 = peg$literalExpectation("float", false),
      peg$c137 = "int",
      peg$c138 = peg$literalExpectation("int", false),
      peg$c139 = "long",
      peg$c140 = peg$literalExpectation("long", false),
      peg$c141 = "short",
      peg$c142 = peg$literalExpectation("short", false),
      peg$c143 = function(_) {result(null, "literal", ["align", "as", "at", "if", "offset", "run", "store", "unless"])},
      peg$c144 = function() {result("<scale> -> execute", "float", null)},
      peg$c145 = function() {result(null, "literal", ["byte", "double", "float", "int", "long", "short"])},
      peg$c146 = function() {result("<path> (byte|double|float|int|long|short)", "nbt_path", null)},
      peg$c147 = function() {result("<pos> <path> (byte|double|float|int|long|short)", "block_pos", null)},
      peg$c148 = function() {result("<target> <path> (byte|double|float|int|long|short)", "entity", null)},
      peg$c149 = function() {result("<objective> -> execute", "objective", null)},
      peg$c150 = function() {result("<targets> <objective>", "entity", null)},
      peg$c151 = function() {result(null, "literal", ["block", "entity", "score"])},
      peg$c152 = function() {result(null, "literal", ["result", "success"])},
      peg$c153 = "unless",
      peg$c154 = peg$literalExpectation("unless", false),
      peg$c155 = "experience",
      peg$c156 = peg$literalExpectation("experience", false),
      peg$c157 = "xp",
      peg$c158 = peg$literalExpectation("xp", false),
      peg$c159 = "add",
      peg$c160 = peg$literalExpectation("add", false),
      peg$c161 = "set",
      peg$c162 = peg$literalExpectation("set", false),
      peg$c163 = function() {result(null, "literal", ["levels", "points"])},
      peg$c164 = function() {result("<amount> [levels|points]", "integer", null)},
      peg$c165 = function() {result("<targets> <amount> [levels|points]", "entities", null)},
      peg$c166 = "query",
      peg$c167 = peg$literalExpectation("query", false),
      peg$c168 = function() {result("<targets> (levels|points)", "entities", null)},
      peg$c169 = function() {result("literal", ["add", "query", "set"])},
      peg$c170 = "fill",
      peg$c171 = peg$literalExpectation("fill", false),
      peg$c172 = function() {result("[<filter>]", "block", null)},
      peg$c173 = function() {result(null, "literal", ["destroy", "hollow", "keep", "outline", "replace"])},
      peg$c174 = function() {result("<block> [destroy|hollow|keep|outline|replace]", "block", null)},
      peg$c175 = function() {result("<to> <block> [destroy|hollow|keep|outline|replace]", "block_pos", null)},
      peg$c176 = function() {result("<from> <to> <block> [destroy|hollow|keep|outline|replace]", "block_pos", null)},
      peg$c177 = "function",
      peg$c178 = peg$literalExpectation("function", false),
      peg$c179 = function() {result("<name>", "function", null)},
      peg$c180 = "gamemode",
      peg$c181 = peg$literalExpectation("gamemode", false),
      peg$c182 = "adventure",
      peg$c183 = peg$literalExpectation("adventure", false),
      peg$c184 = "creative",
      peg$c185 = peg$literalExpectation("creative", false),
      peg$c186 = "spectator",
      peg$c187 = peg$literalExpectation("spectator", false),
      peg$c188 = "survival",
      peg$c189 = peg$literalExpectation("survival", false),
      peg$c190 = function() {result("<target>", "player", null)},
      peg$c191 = "gamerule",
      peg$c192 = peg$literalExpectation("gamerule", false),
      peg$c193 = "announceAdvancements",
      peg$c194 = peg$literalExpectation("announceAdvancements", false),
      peg$c195 = "commandBlockOutput",
      peg$c196 = peg$literalExpectation("commandBlockOutput", false),
      peg$c197 = "disableElytraMovementCheck",
      peg$c198 = peg$literalExpectation("disableElytraMovementCheck", false),
      peg$c199 = "doDaylightCycle",
      peg$c200 = peg$literalExpectation("doDaylightCycle", false),
      peg$c201 = "doEntityDrops",
      peg$c202 = peg$literalExpectation("doEntityDrops", false),
      peg$c203 = "doFireTick",
      peg$c204 = peg$literalExpectation("doFireTick", false),
      peg$c205 = "doLimitedCrafting",
      peg$c206 = peg$literalExpectation("doLimitedCrafting", false),
      peg$c207 = "doMobLoot",
      peg$c208 = peg$literalExpectation("doMobLoot", false),
      peg$c209 = "doMobSpawning",
      peg$c210 = peg$literalExpectation("doMobSpawning", false),
      peg$c211 = "doTileDrops",
      peg$c212 = peg$literalExpectation("doTileDrops", false),
      peg$c213 = "doWeatherCycle",
      peg$c214 = peg$literalExpectation("doWeatherCycle", false),
      peg$c215 = "keepInventory",
      peg$c216 = peg$literalExpectation("keepInventory", false),
      peg$c217 = "logAdminCommands",
      peg$c218 = peg$literalExpectation("logAdminCommands", false),
      peg$c219 = "mobGriefing",
      peg$c220 = peg$literalExpectation("mobGriefing", false),
      peg$c221 = "naturalRegeneration",
      peg$c222 = peg$literalExpectation("naturalRegeneration", false),
      peg$c223 = "reducedDebugInfo",
      peg$c224 = peg$literalExpectation("reducedDebugInfo", false),
      peg$c225 = "sendCommandFeedback",
      peg$c226 = peg$literalExpectation("sendCommandFeedback", false),
      peg$c227 = "showDeathMessages",
      peg$c228 = peg$literalExpectation("showDeathMessages", false),
      peg$c229 = "spectatorsGenerateChunks",
      peg$c230 = peg$literalExpectation("spectatorsGenerateChunks", false),
      peg$c231 = function() {result("<value>", "bool", null)},
      peg$c232 = "maxCommandChainLength",
      peg$c233 = peg$literalExpectation("maxCommandChainLength", false),
      peg$c234 = "maxEntityCramming",
      peg$c235 = peg$literalExpectation("maxEntityCramming", false),
      peg$c236 = "randomTickSpeed",
      peg$c237 = peg$literalExpectation("randomTickSpeed", false),
      peg$c238 = "spawnRadius",
      peg$c239 = peg$literalExpectation("spawnRadius", false),
      peg$c240 = function() {result("<value>", "integer", null)},
      peg$c241 = function() {result(null, "literal", ["announceAdvancements", "commandBlockOutput", "disableElytraMovementCheck", "doDaylightCycle", "doEntityDrops", "doFireTick", "doLimitedCrafting", "doMobLoot", "doMobSpawning", "doTileDrops", "doWeatherCycle", "gameLoopFunction", "keepInventory", "logAdminCommands", "maxCommandChainLength", "maxEntityCramming", "mobGriefing", "naturalRegeneration", "randomTickSpeed", "reducedDebugInfo", "sendCommandFeedback", "showDeathMessages", "spawnRadius", "spectatorsGenerateChunks"])},
      peg$c242 = function() {result("[<count>]", "integer", null)},
      peg$c243 = function() {result("<item> [<count>]", "item", null)},
      peg$c244 = function() {result("<targets> <item> [<count>]", "entities", null)},
      peg$c245 = "help",
      peg$c246 = peg$literalExpectation("help", false),
      peg$c247 = peg$anyExpectation(),
      peg$c248 = function() {result("<command>", "greedy_string", null)},
      peg$c249 = "locate",
      peg$c250 = peg$literalExpectation("locate", false),
      peg$c251 = function() {result(null, "literal", ["EndCity", "Fortress", "Mansion", "Mineshaft", "Monument", "Stronghold", "Temple", "Village"])},
      peg$c252 = "me",
      peg$c253 = peg$literalExpectation("me", false),
      peg$c254 = function() {result("<action>", "greedy_string")},
      peg$c255 = "msg",
      peg$c256 = peg$literalExpectation("msg", false),
      peg$c257 = "tell",
      peg$c258 = peg$literalExpectation("tell", false),
      peg$c259 = "w",
      peg$c260 = peg$literalExpectation("w", false),
      peg$c261 = function() {result("<message>", "message", null)},
      peg$c262 = function() {result("<targets> <message>", "players", null)},
      peg$c263 = "particle",
      peg$c264 = peg$literalExpectation("particle", false),
      peg$c265 = "force",
      peg$c266 = peg$literalExpectation("force", false),
      peg$c267 = "normal",
      peg$c268 = peg$literalExpectation("normal", false),
      peg$c269 = function() {result("<viewers>", "entities", null)},
      peg$c270 = function() {result(null, "literal", ["force", "normal"])},
      peg$c271 = function() {result("<count> [force|normal]", "integer", null)},
      peg$c272 = function() {result("<speed> <count> [force|normal]", "integer", null)},
      peg$c273 = function() {result("<delta> <speed> <count> [force|normal]", "vec3", null)},
      peg$c274 = function() {result("<pos> <delta> <speed> <count> [force|normal]", "vec3", null)},
      peg$c275 = "playsound",
      peg$c276 = peg$literalExpectation("playsound", false),
      peg$c277 = "ambient",
      peg$c278 = peg$literalExpectation("ambient", false),
      peg$c279 = "hostile",
      peg$c280 = peg$literalExpectation("hostile", false),
      peg$c281 = "master",
      peg$c282 = peg$literalExpectation("master", false),
      peg$c283 = "music",
      peg$c284 = peg$literalExpectation("music", false),
      peg$c285 = "neutral",
      peg$c286 = peg$literalExpectation("neutral", false),
      peg$c287 = "player",
      peg$c288 = peg$literalExpectation("player", false),
      peg$c289 = "record",
      peg$c290 = peg$literalExpectation("record", false),
      peg$c291 = "voice",
      peg$c292 = peg$literalExpectation("voice", false),
      peg$c293 = "weather",
      peg$c294 = peg$literalExpectation("weather", false),
      peg$c295 = function() {result("[<minVolume>]", "float", null)},
      peg$c296 = function() {result("[<pitch>] [<minVolume>]", "float", null)},
      peg$c297 = function() {result("[<volume>] [<pitch>]", "float", null)},
      peg$c298 = function() {result("<pos> [<volume>]", "vec3", null)},
      peg$c299 = function() {result("<targets> <pos> [<volume>]", "players", null)},
      peg$c300 = function() {result(null, "literal", ["ambient", "block", "hostile", "master", "music", "neutral", "player", "record", "voice", "weather"])},
      peg$c301 = function() {result("<sound> (ambient|block|hostile|master|music|neutral|player|record|voice|weather)", "sound", null)},
      peg$c302 = "recipe",
      peg$c303 = peg$literalExpectation("recipe", false),
      peg$c304 = "take",
      peg$c305 = peg$literalExpectation("take", false),
      peg$c306 = function() {result("<recipe>", "recipe", ["*"])},
      peg$c307 = function() {result("<targets> (*|<recipe>)", "players", null)},
      peg$c308 = function() {result(null, "literal", ["give", "take"])},
      peg$c309 = "replaceitem",
      peg$c310 = peg$literalExpectation("replaceitem", false),
      peg$c311 = function() {result("<slot> <item> [<count>]", "item_slot", null)},
      peg$c312 = function() {result("<pos> <slot> <item> [<count>]", "block_pos", null)},
      peg$c313 = function() {result("<tagets> <slot> <item> [<count>]", "entities", null)},
      peg$c314 = "say",
      peg$c315 = peg$literalExpectation("say", false),
      peg$c316 = "scoreboard",
      peg$c317 = peg$literalExpectation("scoreboard", false),
      peg$c318 = "objectives",
      peg$c319 = peg$literalExpectation("objectives", false),
      peg$c320 = function() {result("[<displayName>]", "greedy_string", null)},
      peg$c321 = function() {result("<criteria> [<displayName>]", "objective_criteria", null)},
      peg$c322 = function() {result("<objective> <criteria> [<displayName>]", "objective", null)},
      peg$c323 = function() {result("<objective>", "objective", null)},
      peg$c324 = "setdisplay",
      peg$c325 = peg$literalExpectation("setdisplay", false),
      peg$c326 = function() {result("[<objective>]", "objective", null)},
      peg$c327 = function() {result("<slot> [<objective>]", "scoreboard_slot", null)},
      peg$c328 = function() {result(null, "literal", ["add", "remove", "setdisplay"])},
      peg$c329 = "players",
      peg$c330 = peg$literalExpectation("players", false),
      peg$c331 = function() {result("<score>", "integer", null)},
      peg$c332 = function() {result("<objective> <score>", "objective", null)},
      peg$c333 = function() {result("<targets> <objective> <score>", "entities", null)},
      peg$c334 = function() {result("<targets> <objective>", "entities", null)},
      peg$c335 = function() {result("<target>", "entity", null)},
      peg$c336 = "operation",
      peg$c337 = peg$literalExpectation("operation", false),
      peg$c338 = function() {result("<sourceObjective>", "objective", null)},
      peg$c339 = function() {result("<source> <sourceObjective>", "entities", null)},
      peg$c340 = function() {result("<operation> <source> <sourceObjective>", "operation", null)},
      peg$c341 = function() {result("<targetObjective> <operation> <source> <sourceObjective>", "objective", null)},
      peg$c342 = function() {result("<targets> <targetObjective> <operation> <source> <sourceObjective>", "entities", null)},
      peg$c343 = "reset",
      peg$c344 = peg$literalExpectation("reset", false),
      peg$c345 = function() {result("<targets> [<objective>]", "entities", null)},
      peg$c346 = function() {result(null, "literal", ["add", "enable", "get", "list", "operation", "remove", "reset", "set"])},
      peg$c347 = function() {result(null, "literal", ["objectives", "players"])},
      peg$c348 = "setblock",
      peg$c349 = peg$literalExpectation("setblock", false),
      peg$c350 = function() {result(null, "literal", ["destroy", "keep", "replace"])},
      peg$c351 = function() {result("<block> [destroy|keep|replace]", "block", null)},
      peg$c352 = function() {result("<pos> <block> [destroy|keep|replace]", "block_pos", null)},
      peg$c353 = "setworldspawn",
      peg$c354 = peg$literalExpectation("setworldspawn", false),
      peg$c355 = function() {result("[<pos>]", "block_pos", null)},
      peg$c356 = "spawnpoint",
      peg$c357 = peg$literalExpectation("spawnpoint", false),
      peg$c358 = function() {result("[<targets>] [<pos>]", "players", null)},
      peg$c359 = "spreadplayers",
      peg$c360 = peg$literalExpectation("spreadplayers", false),
      peg$c361 = function() {result("<targets>", "entities", null)},
      peg$c362 = function() {result("<respectTeams> <targets>", "bool", null)},
      peg$c363 = function() {result("<maxRange> <respectTeams> <targets>", "float", null)},
      peg$c364 = function() {result("<spreadDistance> <maxRange> <respectTeams> <targets>", "float", null)},
      peg$c365 = function() {result("<center> <spreadDistance> <maxRange> <respectTeams> <targets>", "vec2", null)},
      peg$c366 = "stopsound",
      peg$c367 = peg$literalExpectation("stopsound", false),
      peg$c368 = function() {result("<sound>", "sound", null)},
      peg$c369 = function() {result("<targets> (*|ambient|block|hostile|master|music|neutral|player|record|voice|weather)", "players", null)},
      peg$c370 = "summon",
      peg$c371 = peg$literalExpectation("summon", false),
      peg$c372 = function() {result("[<pos>] [<nbt>]", "vec3", null)},
      peg$c373 = function() {result("<entity> [<pos>]", "entity_", null)},
      peg$c374 = "tag",
      peg$c375 = peg$literalExpectation("tag", false),
      peg$c376 = function() {result("<name>", "word", null)},
      peg$c377 = function() {result(null, "literal", ["add", "list", "remove"])},
      peg$c378 = function() {result(null, "literal", ["add", "remove"])},
      peg$c379 = "team",
      peg$c380 = peg$literalExpectation("team", false),
      peg$c381 = function() {result("<team> [<displayName>]", "word", null)},
      peg$c382 = "empty",
      peg$c383 = peg$literalExpectation("empty", false),
      peg$c384 = function() {result("<team>", "team_", null)},
      peg$c385 = "join",
      peg$c386 = peg$literalExpectation("join", false),
      peg$c387 = function() {result("[<members>]", "entities", null)},
      peg$c388 = function() {result("<team> [<members>]", "team_", null)},
      peg$c389 = "leave",
      peg$c390 = peg$literalExpectation("leave", false),
      peg$c391 = function() {result("<members>", "entities", null)},
      peg$c392 = "option",
      peg$c393 = peg$literalExpectation("option", false),
      peg$c394 = "collisionRule",
      peg$c395 = peg$literalExpectation("collisionRule", false),
      peg$c396 = function() {result(null, "literal", ["always", "never", "pushOtherTeams", "pushOwnTeam"])},
      peg$c397 = "color",
      peg$c398 = peg$literalExpectation("color", false),
      peg$c399 = function() {result("<value>", "color", null)},
      peg$c400 = "deathMessageVisibility",
      peg$c401 = peg$literalExpectation("deathMessageVisibility", false),
      peg$c402 = "nametagVisibility ",
      peg$c403 = peg$literalExpectation("nametagVisibility ", false),
      peg$c404 = function() {result(null, "literal", ["always", "hideForOtherTeams", "hideForOwnTeam", "never"])},
      peg$c405 = "friendlfire",
      peg$c406 = peg$literalExpectation("friendlfire", false),
      peg$c407 = "seeFriendlyInvisibles",
      peg$c408 = peg$literalExpectation("seeFriendlyInvisibles", false),
      peg$c409 = function() {result("<allowed>", "bool", null)},
      peg$c410 = function() {result(null, "literal", ["add", "empty", "join", "leave", "list", "option", "remove"])},
      peg$c411 = "tellraw",
      peg$c412 = peg$literalExpectation("tellraw", false),
      peg$c413 = function() {result("<message>", "component", null)},
      peg$c414 = function() {result("<targets> <message>", "entities", null)},
      peg$c415 = "time",
      peg$c416 = peg$literalExpectation("time", false),
      peg$c417 = function() {result("<time>", "integer", null)},
      peg$c418 = function() {result(null, "literal", ["day", "daytime", "gametime"])},
      peg$c419 = function() {result("<time>", "literal", ["day", "night"])},
      peg$c420 = function() {result(null, "literal", ["add", "query", "set"])},
      peg$c421 = "title",
      peg$c422 = peg$literalExpectation("title", false),
      peg$c423 = "actionbar",
      peg$c424 = peg$literalExpectation("actionbar", false),
      peg$c425 = "subtitle",
      peg$c426 = peg$literalExpectation("subtitle", false),
      peg$c427 = function() {result("<title>", "component", null)},
      peg$c428 = "times",
      peg$c429 = peg$literalExpectation("times", false),
      peg$c430 = function() {result("<fadeOut>", "integer", null)},
      peg$c431 = function() {result("<stay> <fadeOut>", "integer", null)},
      peg$c432 = function() {result("<fadeIn> <stay> <fadeOut>", "integer", null)},
      peg$c433 = function() {result(null, "literal", ["actionbar", "clear", "reset", "subtitle", "times", "title"])},
      peg$c434 = "trigger",
      peg$c435 = peg$literalExpectation("trigger", false),
      peg$c436 = function() {result(null, "literal", ["add", "set"])},
      peg$c437 = function() {result("<objective> [add|set]", "objective", null)},
      peg$c438 = "rain",
      peg$c439 = peg$literalExpectation("rain", false),
      peg$c440 = "thunder",
      peg$c441 = peg$literalExpectation("thunder", false),
      peg$c442 = function() {result("[<duration>]", "integer", null)},
      peg$c443 = function() {result(null, "literal", ["clear", "rain", "thunder"])},
      peg$c444 = "worldborder",
      peg$c445 = peg$literalExpectation("worldborder", false),
      peg$c446 = function() {result("[<time>]", "integer", null)},
      peg$c447 = function() {result("<distance> [<time>]", "integer", null)},
      peg$c448 = "center",
      peg$c449 = peg$literalExpectation("center", false),
      peg$c450 = function() {result("<pos>", "vec2", null)},
      peg$c451 = "damage",
      peg$c452 = peg$literalExpectation("damage", false),
      peg$c453 = "amount",
      peg$c454 = peg$literalExpectation("amount", false),
      peg$c455 = function() {result("<damagePerBlock>", "integer", null)},
      peg$c456 = "buffer",
      peg$c457 = peg$literalExpectation("buffer", false),
      peg$c458 = function() {result("<distance>", "integer", null)},
      peg$c459 = function() {result(null, "literal", ["damage", "amount"])},
      peg$c460 = "warning",
      peg$c461 = peg$literalExpectation("warning", false),
      peg$c462 = "distance",
      peg$c463 = peg$literalExpectation("distance", false),
      peg$c464 = function() {result(null, "literal", ["distance", "time"])},
      peg$c465 = function() {result(null, "literal", ["add", "center", "damage", "get", "set", "warning"])},
      peg$c466 = "false",
      peg$c467 = peg$literalExpectation("false", false),
      peg$c468 = "true",
      peg$c469 = peg$literalExpectation("true", false),
      peg$c470 = function() {result(null, ["false", "true"])},
      peg$c471 = "@",
      peg$c472 = peg$literalExpectation("@", false),
      peg$c473 = /^[parse]/,
      peg$c474 = peg$classExpectation(["p", "a", "r", "s", "e"], false, false),
      peg$c475 = function() {result(null, ["@p", "@a", "@r", "@s", "@e"])},
      peg$c476 = /^[rse]/,
      peg$c477 = peg$classExpectation(["r", "s", "e"], false, false),
      peg$c478 = function() {result(null, "literal", ["@p", "@r", "@s"])},
      peg$c479 = function() {result(null, "literal", ["@p", "@a", "@r", "@s"])},
      peg$c480 = /^[^ ]/,
      peg$c481 = peg$classExpectation([" "], true, false),
      peg$c482 = " ",
      peg$c483 = peg$literalExpectation(" ", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecommand();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecommand() {
    var s0, s1;

    s0 = peg$parseadvancement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclear();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclone();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedata();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedatapack();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedefaultgamemode();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedifficulty();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseeffect();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseexecute();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseexperience();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsefill();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsefunction();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsegamemode();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsegamerule();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsehelp();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parselocate();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseme();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsemsg();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseparticle();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseplaysound();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parserecipe();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsereplaceitem();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsesay();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsescoreboard();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsestopsound();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsesummon();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsetag();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseteam();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsetellraw();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsetime();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsetitle();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsetrigger();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseweather();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseworldborder();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parse__();
                                                                        if (s1 !== peg$FAILED) {
                                                                          peg$savedPos = s0;
                                                                          s1 = peg$c1();
                                                                        }
                                                                        s0 = s1;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseadvancement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c4) {
          s4 = peg$c4;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s4 = peg$c6;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseplayers();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s10 = peg$c8;
                  peg$currPos += 4;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c10();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c11();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c12) {
                    s10 = peg$c12;
                    peg$currPos += 4;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                  }
                  if (s10 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c14) {
                      s10 = peg$c14;
                      peg$currPos += 7;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    if (s10 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c16) {
                        s10 = peg$c16;
                        peg$currPos += 5;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
                      }
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse__();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c18();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c19();
                    }
                    s9 = s10;
                  }
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_players();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c20();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c21();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclear() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c24();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_item();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c25();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c26();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclone() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c29) {
                      s13 = peg$c29;
                      peg$currPos += 8;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse___();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$parse__();
                            if (s18 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c31();
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse_block();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c32();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      if (input.substr(peg$currPos, 6) === peg$c33) {
                        s13 = peg$c33;
                        peg$currPos += 6;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                      }
                      if (s13 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c35) {
                          s13 = peg$c35;
                          peg$currPos += 7;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c36); }
                        }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c31();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c37();
                        }
                        s12 = s13;
                      }
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c38();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c39();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c40();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedata() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c43) {
          s4 = peg$c43;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s7 = peg$c45;
              peg$currPos += 5;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c47();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_nbt_path();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c48();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c49();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                s7 = peg$c50;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentity();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c47();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_nbt_path();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c48();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseentity();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c52();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c53();
                }
                s6 = s7;
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c54) {
            s4 = peg$c54;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c56) {
              s4 = peg$c56;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s7 = peg$c45;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseblock_pos();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_nbt();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c58();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_block_pos();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c59();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c50) {
                  s7 = peg$c50;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentity();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_nbt();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c58();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entity();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c60();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c53();
                  }
                  s6 = s7;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c61();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatapack() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c64) {
          s4 = peg$c64;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c66();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c67) {
            s4 = peg$c67;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse___();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c69) {
                    s10 = peg$c69;
                    peg$currPos += 5;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c70); }
                  }
                  if (s10 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c71) {
                      s10 = peg$c71;
                      peg$currPos += 6;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_string();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c73();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c74();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_string();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c66();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c75) {
              s4 = peg$c75;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c77(s6);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c78();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefaultgamemode() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c81();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedifficulty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c84();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeffect() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseentities();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c87();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_entities();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c88();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c89) {
            s4 = peg$c89;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse___();
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$parse_bool();
                              if (s18 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c91();
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c92();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c93();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c94();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c88();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c95();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexecute() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesub();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c98();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesub() {
    var s0;

    s0 = peg$parsealign();
    if (s0 === peg$FAILED) {
      s0 = peg$parseas();
      if (s0 === peg$FAILED) {
        s0 = peg$parseat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseif();
          if (s0 === peg$FAILED) {
            s0 = peg$parserun();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestore();
              if (s0 === peg$FAILED) {
                s0 = peg$parseunless();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealign() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c101();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseas() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c104();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseat() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c105) {
      s1 = peg$c105;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c104();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseif() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsesub();
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c98();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c109();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c110();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c50) {
            s4 = peg$c50;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesub();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c98();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c111();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c112) {
              s4 = peg$c112;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c113); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseentity();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse___();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse___();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parseentity();
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parse_();
                              if (s17 !== peg$FAILED) {
                                s18 = peg$currPos;
                                s19 = peg$parse___();
                                if (s19 !== peg$FAILED) {
                                  s20 = peg$parse_();
                                  if (s20 !== peg$FAILED) {
                                    s21 = peg$parsesub();
                                    if (s21 === peg$FAILED) {
                                      s21 = peg$currPos;
                                      s22 = peg$parse__();
                                      if (s22 !== peg$FAILED) {
                                        peg$savedPos = s21;
                                        s22 = peg$c98();
                                      }
                                      s21 = s22;
                                    }
                                    if (s21 !== peg$FAILED) {
                                      s19 = [s19, s20, s21];
                                      s18 = s19;
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                                if (s18 === peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$parse__();
                                  if (s19 !== peg$FAILED) {
                                    peg$savedPos = s18;
                                    s19 = peg$c114();
                                  }
                                  s18 = s19;
                                }
                                if (s18 !== peg$FAILED) {
                                  s16 = [s16, s17, s18];
                                  s15 = s16;
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                            if (s15 === peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parse_entity();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c115();
                              }
                              s15 = s16;
                            }
                            if (s15 !== peg$FAILED) {
                              s13 = [s13, s14, s15];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c116();
                          }
                          s12 = s13;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c117();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse_entity();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c118();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c119();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoffset() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c120) {
      s1 = peg$c120;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsevec3();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_vec3();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c122();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserun() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c123) {
      s1 = peg$c123;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c124); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecommand();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestore() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c125) {
      s1 = peg$c125;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c127) {
          s4 = peg$c127;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c128); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c129) {
            s4 = peg$c129;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s7 = peg$c45;
              peg$currPos += 5;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        if (input.substr(peg$currPos, 4) === peg$c131) {
                          s16 = peg$c131;
                          peg$currPos += 4;
                        } else {
                          s16 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c132); }
                        }
                        if (s16 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c133) {
                            s16 = peg$c133;
                            peg$currPos += 6;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c134); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c135) {
                              s16 = peg$c135;
                              peg$currPos += 5;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c136); }
                            }
                            if (s16 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c137) {
                                s16 = peg$c137;
                                peg$currPos += 3;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c138); }
                              }
                              if (s16 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c139) {
                                  s16 = peg$c139;
                                  peg$currPos += 4;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                }
                                if (s16 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c141) {
                                    s16 = peg$c141;
                                    peg$currPos += 5;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            s19 = peg$parse___();
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parsesub();
                                if (s21 === peg$FAILED) {
                                  s21 = peg$currPos;
                                  s22 = peg$parse__();
                                  if (s22 !== peg$FAILED) {
                                    peg$savedPos = s21;
                                    s22 = peg$c143(s22);
                                  }
                                  s21 = s22;
                                }
                                if (s21 !== peg$FAILED) {
                                  s19 = [s19, s20, s21];
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c144();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c145();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_nbt_path();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c146();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c147();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                s7 = peg$c50;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentity();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          if (input.substr(peg$currPos, 4) === peg$c131) {
                            s16 = peg$c131;
                            peg$currPos += 4;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c132); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c133) {
                              s16 = peg$c133;
                              peg$currPos += 6;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c134); }
                            }
                            if (s16 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c135) {
                                s16 = peg$c135;
                                peg$currPos += 5;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c136); }
                              }
                              if (s16 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c137) {
                                  s16 = peg$c137;
                                  peg$currPos += 3;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                }
                                if (s16 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c139) {
                                    s16 = peg$c139;
                                    peg$currPos += 4;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                  }
                                  if (s16 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c141) {
                                      s16 = peg$c141;
                                      peg$currPos += 5;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse___();
                              if (s19 !== peg$FAILED) {
                                s20 = peg$parse_();
                                if (s20 !== peg$FAILED) {
                                  s21 = peg$parsesub();
                                  if (s21 === peg$FAILED) {
                                    s21 = peg$currPos;
                                    s22 = peg$parse__();
                                    if (s22 !== peg$FAILED) {
                                      peg$savedPos = s21;
                                      s22 = peg$c143(s22);
                                    }
                                    s21 = s22;
                                  }
                                  if (s21 !== peg$FAILED) {
                                    s19 = [s19, s20, s21];
                                    s18 = s19;
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                              if (s18 === peg$FAILED) {
                                s18 = peg$currPos;
                                s19 = peg$parse__();
                                if (s19 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c144();
                                }
                                s18 = s19;
                              }
                              if (s18 !== peg$FAILED) {
                                s16 = [s16, s17, s18];
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c145();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_nbt_path();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c146();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_entity();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c148();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c112) {
                  s7 = peg$c112;
                  peg$currPos += 5;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentities();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse___();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsesub();
                            if (s15 === peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parse__();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c98();
                              }
                              s15 = s16;
                            }
                            if (s15 !== peg$FAILED) {
                              s13 = [s13, s14, s15];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c149();
                          }
                          s12 = s13;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entities();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c150();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c151();
                  }
                  s6 = s7;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c152();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunless() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c153) {
      s1 = peg$c153;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsesub();
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c143(s13);
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c109();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c110();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c50) {
            s4 = peg$c50;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsesub();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c98();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c111();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c112) {
              s4 = peg$c112;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c113); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseentity();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse___();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse___();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parseentity();
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parse_();
                              if (s17 !== peg$FAILED) {
                                s18 = peg$parsesub();
                                if (s18 === peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$parse__();
                                  if (s19 !== peg$FAILED) {
                                    peg$savedPos = s18;
                                    s19 = peg$c114();
                                  }
                                  s18 = s19;
                                }
                                if (s18 !== peg$FAILED) {
                                  s16 = [s16, s17, s18];
                                  s15 = s16;
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                            if (s15 === peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parse_entity();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c115();
                              }
                              s15 = s16;
                            }
                            if (s15 !== peg$FAILED) {
                              s13 = [s13, s14, s15];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c116();
                          }
                          s12 = s13;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c117();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse_entity();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c118();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c119();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexperience() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c155) {
      s1 = peg$c155;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c157) {
        s1 = peg$c157;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c159) {
          s4 = peg$c159;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s4 = peg$c161;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseentities();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse__();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c163();
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c164();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_entities();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c165();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c166) {
            s4 = peg$c166;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c167); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c163();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c168();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c169();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefill() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c170) {
      s1 = peg$c170;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c171); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c35) {
                      s13 = peg$c35;
                      peg$currPos += 7;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_block();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c172();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c173();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c174();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c175();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c176();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c177) {
      s1 = peg$c177;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c179();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegamemode() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c180) {
      s1 = peg$c180;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c182) {
          s4 = peg$c182;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c184) {
            s4 = peg$c184;
            peg$currPos += 8;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c185); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c186) {
              s4 = peg$c186;
              peg$currPos += 9;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c187); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c188) {
                s4 = peg$c188;
                peg$currPos += 8;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c189); }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_player();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c190();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c81();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegamerule() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c191) {
      s1 = peg$c191;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c193) {
          s4 = peg$c193;
          peg$currPos += 20;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 18) === peg$c195) {
            s4 = peg$c195;
            peg$currPos += 18;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 26) === peg$c197) {
              s4 = peg$c197;
              peg$currPos += 26;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c198); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c199) {
                s4 = peg$c199;
                peg$currPos += 15;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c200); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 13) === peg$c201) {
                  s4 = peg$c201;
                  peg$currPos += 13;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c202); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10) === peg$c203) {
                    s4 = peg$c203;
                    peg$currPos += 10;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c204); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 17) === peg$c205) {
                      s4 = peg$c205;
                      peg$currPos += 17;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c206); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9) === peg$c207) {
                        s4 = peg$c207;
                        peg$currPos += 9;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c208); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 13) === peg$c209) {
                          s4 = peg$c209;
                          peg$currPos += 13;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c210); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 11) === peg$c211) {
                            s4 = peg$c211;
                            peg$currPos += 11;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c212); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 14) === peg$c213) {
                              s4 = peg$c213;
                              peg$currPos += 14;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c214); }
                            }
                            if (s4 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13) === peg$c215) {
                                s4 = peg$c215;
                                peg$currPos += 13;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c216); }
                              }
                              if (s4 === peg$FAILED) {
                                if (input.substr(peg$currPos, 16) === peg$c217) {
                                  s4 = peg$c217;
                                  peg$currPos += 16;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c218); }
                                }
                                if (s4 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 11) === peg$c219) {
                                    s4 = peg$c219;
                                    peg$currPos += 11;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c220); }
                                  }
                                  if (s4 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 19) === peg$c221) {
                                      s4 = peg$c221;
                                      peg$currPos += 19;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c222); }
                                    }
                                    if (s4 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 16) === peg$c223) {
                                        s4 = peg$c223;
                                        peg$currPos += 16;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c224); }
                                      }
                                      if (s4 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 19) === peg$c225) {
                                          s4 = peg$c225;
                                          peg$currPos += 19;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c226); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 17) === peg$c227) {
                                            s4 = peg$c227;
                                            peg$currPos += 17;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c228); }
                                          }
                                          if (s4 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 24) === peg$c229) {
                                              s4 = peg$c229;
                                              peg$currPos += 24;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c230); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_bool();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c231();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 21) === peg$c232) {
            s4 = peg$c232;
            peg$currPos += 21;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 17) === peg$c234) {
              s4 = peg$c234;
              peg$currPos += 17;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c236) {
                s4 = peg$c236;
                peg$currPos += 15;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c238) {
                  s4 = peg$c238;
                  peg$currPos += 11;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c239); }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c240();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c241();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegive() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c242();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_item();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c243();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseentities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c244();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehelp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c245) {
      s1 = peg$c245;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c247); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c248();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselocate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c249) {
      s1 = peg$c249;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c251();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseme() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c252) {
      s1 = peg$c252;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c253); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c247); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c254();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemsg() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c255) {
      s1 = peg$c255;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c257) {
        s1 = peg$c257;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 119) {
          s1 = peg$c259;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_message();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c261();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c262();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparticle() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c263) {
      s1 = peg$c263;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c264); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsevec3();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parsevec3();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse___();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c265) {
                              s19 = peg$c265;
                              peg$currPos += 5;
                            } else {
                              s19 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c266); }
                            }
                            if (s19 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c267) {
                                s19 = peg$c267;
                                peg$currPos += 6;
                              } else {
                                s19 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c268); }
                              }
                            }
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parse_entities();
                                if (s21 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c269();
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c270();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c271();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c272();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_vec3();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c273();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_vec3();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c274();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c273();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseplaysound() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c275) {
      s1 = peg$c275;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c276); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c277) {
              s7 = peg$c277;
              peg$currPos += 7;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c278); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s7 = peg$c45;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c279) {
                  s7 = peg$c279;
                  peg$currPos += 7;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c280); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c281) {
                    s7 = peg$c281;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c282); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c283) {
                      s7 = peg$c283;
                      peg$currPos += 5;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c284); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c285) {
                        s7 = peg$c285;
                        peg$currPos += 7;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c286); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c287) {
                          s7 = peg$c287;
                          peg$currPos += 6;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c288); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c289) {
                            s7 = peg$c289;
                            peg$currPos += 6;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c290); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c291) {
                              s7 = peg$c291;
                              peg$currPos += 5;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c292); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c293) {
                                s7 = peg$c293;
                                peg$currPos += 7;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c294); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseplayers();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parsevec3();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse___();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            s19 = peg$parse___();
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parse__();
                                if (s21 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c295();
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c296();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c297();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_vec3();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c298();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_players();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c299();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c300();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c301();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserecipe() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c302) {
      s1 = peg$c302;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c303); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c89) {
          s4 = peg$c89;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c304) {
            s4 = peg$c304;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c305); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseplayers();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c306();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_players();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c307();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c308();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereplaceitem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c309) {
      s1 = peg$c309;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c310); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c242();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_item();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c243();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c311();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c312();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c50) {
            s4 = peg$c50;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c242();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_item();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c243();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c311();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c313();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c53();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesay() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c314) {
      s1 = peg$c314;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c315); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_message();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c261();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescoreboard() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c316) {
      s1 = peg$c316;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c317); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c318) {
          s4 = peg$c318;
          peg$currPos += 10;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c319); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c159) {
              s7 = peg$c159;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c160); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = [];
                        if (input.length > peg$currPos) {
                          s16 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s16 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c247); }
                        }
                        while (s16 !== peg$FAILED) {
                          s15.push(s16);
                          if (input.length > peg$currPos) {
                            s16 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c247); }
                          }
                        }
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c320();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c321();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c322();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s7 = peg$c56;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c323();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 10) === peg$c324) {
                  s7 = peg$c324;
                  peg$currPos += 10;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c325); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse___();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse__();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c326();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c327();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c328();
                  }
                  s6 = s7;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c329) {
            s4 = peg$c329;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c330); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c159) {
                s7 = peg$c159;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c160); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c56) {
                  s7 = peg$c56;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c161) {
                    s7 = peg$c161;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c162); }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentities();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c331();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c332();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_entities();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c333();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c67) {
                  s7 = peg$c67;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c43) {
                    s7 = peg$c43;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentities();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse__();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c323();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entities();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c334();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c75) {
                    s7 = peg$c75;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_entity();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c335();
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    if (input.substr(peg$currPos, 9) === peg$c336) {
                      s7 = peg$c336;
                      peg$currPos += 9;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c337); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parseentities();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parse___();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$currPos;
                                s16 = peg$parse___();
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parse_();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$currPos;
                                    s19 = peg$parseentities();
                                    if (s19 !== peg$FAILED) {
                                      s20 = peg$parse_();
                                      if (s20 !== peg$FAILED) {
                                        s21 = peg$parse__();
                                        if (s21 !== peg$FAILED) {
                                          peg$savedPos = s18;
                                          s19 = peg$c338();
                                          s18 = s19;
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                    if (s18 === peg$FAILED) {
                                      s18 = peg$currPos;
                                      s19 = peg$parse_entities();
                                      if (s19 !== peg$FAILED) {
                                        peg$savedPos = s18;
                                        s19 = peg$c339();
                                      }
                                      s18 = s19;
                                    }
                                    if (s18 !== peg$FAILED) {
                                      s16 = [s16, s17, s18];
                                      s15 = s16;
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 === peg$FAILED) {
                                  s15 = peg$currPos;
                                  s16 = peg$parse__();
                                  if (s16 !== peg$FAILED) {
                                    peg$savedPos = s15;
                                    s16 = peg$c340();
                                  }
                                  s15 = s16;
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$currPos;
                              s13 = peg$parse__();
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s12;
                                s13 = peg$c341();
                              }
                              s12 = s13;
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parse_entities();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s9;
                            s10 = peg$c342();
                          }
                          s9 = s10;
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c343) {
                        s7 = peg$c343;
                        peg$currPos += 5;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c344); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parseentities();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                peg$savedPos = s9;
                                s10 = peg$c326();
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            s10 = peg$parse_entities();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c345();
                            }
                            s9 = s10;
                          }
                          if (s9 !== peg$FAILED) {
                            s7 = [s7, s8, s9];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$currPos;
                        s7 = peg$parse__();
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s6;
                          s7 = peg$c346();
                        }
                        s6 = s7;
                      }
                    }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c347();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetblock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c348) {
      s1 = peg$c348;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c349); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c350();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c351();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c352();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetworldspawn() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c353) {
      s1 = peg$c353;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c354); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_block_pos();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c355();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespawnpoint() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c356) {
      s1 = peg$c356;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c357); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_block_pos();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c355();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c358();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespreadplayers() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c359) {
      s1 = peg$c359;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c360); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsevec2();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_entities();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c361();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_bool();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c362();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c363();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c364();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c365();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestopsound() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c366) {
      s1 = peg$c366;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c367); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c277) {
              s7 = peg$c277;
              peg$currPos += 7;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c278); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s7 = peg$c45;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c279) {
                  s7 = peg$c279;
                  peg$currPos += 7;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c280); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c281) {
                    s7 = peg$c281;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c282); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c283) {
                      s7 = peg$c283;
                      peg$currPos += 5;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c284); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c285) {
                        s7 = peg$c285;
                        peg$currPos += 7;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c286); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c287) {
                          s7 = peg$c287;
                          peg$currPos += 6;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c288); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c289) {
                            s7 = peg$c289;
                            peg$currPos += 6;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c290); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c291) {
                              s7 = peg$c291;
                              peg$currPos += 5;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c292); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c293) {
                                s7 = peg$c293;
                                peg$currPos += 7;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c294); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c368();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c300();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c369();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesummon() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c370) {
      s1 = peg$c370;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c371); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsevec3();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_nbt();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c58();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_vec3();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c372();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c373();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c374) {
      s1 = peg$c374;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c375); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c159) {
              s7 = peg$c159;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c160); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s7 = peg$c56;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c376();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c377();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c378();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseteam() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c379) {
      s1 = peg$c379;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c380); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c159) {
          s4 = peg$c159;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = [];
                if (input.length > peg$currPos) {
                  s10 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c247); }
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (input.length > peg$currPos) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c247); }
                  }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c320();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c381();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c382) {
            s4 = peg$c382;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c383); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c75) {
              s4 = peg$c75;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s4 = peg$c56;
                peg$currPos += 6;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c384();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c385) {
              s4 = peg$c385;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c386); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse___();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_entities();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c387();
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c388();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c389) {
                s4 = peg$c389;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c390); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_entities();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c391();
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c392) {
                  s4 = peg$c392;
                  peg$currPos += 6;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c393); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse___();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.substr(peg$currPos, 13) === peg$c394) {
                          s10 = peg$c394;
                          peg$currPos += 13;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c395); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse__();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c396();
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c397) {
                            s10 = peg$c397;
                            peg$currPos += 5;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c398); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                peg$savedPos = s9;
                                s10 = peg$c399();
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            if (input.substr(peg$currPos, 22) === peg$c400) {
                              s10 = peg$c400;
                              peg$currPos += 22;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c401); }
                            }
                            if (s10 === peg$FAILED) {
                              if (input.substr(peg$currPos, 18) === peg$c402) {
                                s10 = peg$c402;
                                peg$currPos += 18;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c403); }
                              }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse__();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s9;
                                  s10 = peg$c404();
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = peg$currPos;
                              if (input.substr(peg$currPos, 11) === peg$c405) {
                                s10 = peg$c405;
                                peg$currPos += 11;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c406); }
                              }
                              if (s10 === peg$FAILED) {
                                if (input.substr(peg$currPos, 21) === peg$c407) {
                                  s10 = peg$c407;
                                  peg$currPos += 21;
                                } else {
                                  s10 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c408); }
                                }
                              }
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parse_();
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parse_bool();
                                  if (s12 !== peg$FAILED) {
                                    peg$savedPos = s9;
                                    s10 = peg$c409();
                                    s9 = s10;
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            }
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s4 = [s4, s5, s6];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parse__();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c410();
                  }
                  s3 = s4;
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetellraw() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c411) {
      s1 = peg$c411;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c412); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_component();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c413();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c414();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetime() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c415) {
      s1 = peg$c415;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c416); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c159) {
          s4 = peg$c159;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c417();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c166) {
            s4 = peg$c166;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c167); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c418();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c161) {
              s4 = peg$c161;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c162); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c419();
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c420();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetitle() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c421) {
      s1 = peg$c421;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c422); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c423) {
              s7 = peg$c423;
              peg$currPos += 9;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c424); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c425) {
                s7 = peg$c425;
                peg$currPos += 8;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c426); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c421) {
                  s7 = peg$c421;
                  peg$currPos += 5;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c422); }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_component();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c427();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c428) {
                s7 = peg$c428;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c429); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c430();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c431();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c432();
                }
                s6 = s7;
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c433();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetrigger() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c434) {
      s1 = peg$c434;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c435); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c159) {
              s7 = peg$c159;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c160); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c161) {
                s7 = peg$c161;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c162); }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c240();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c436();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c437();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseweather() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c293) {
      s1 = peg$c293;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c294); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c438) {
            s4 = peg$c438;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c439); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c440) {
              s4 = peg$c440;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c441); }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c442();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c443();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseworldborder() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c444) {
      s1 = peg$c444;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c445); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c159) {
          s4 = peg$c159;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s4 = peg$c161;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c446();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c447();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c448) {
            s4 = peg$c448;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c449); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_vec2();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c450();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c451) {
              s4 = peg$c451;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c452); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c453) {
                  s7 = peg$c453;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c454); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c455();
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c456) {
                    s7 = peg$c456;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c457); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c458();
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c459();
                    }
                    s6 = s7;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c460) {
                s4 = peg$c460;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c461); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 8) === peg$c462) {
                    s7 = peg$c462;
                    peg$currPos += 8;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c463); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c458();
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c415) {
                      s7 = peg$c415;
                      peg$currPos += 4;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c416); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse__();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s6;
                          s7 = peg$c417();
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = peg$currPos;
                      s7 = peg$parse__();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c464();
                      }
                      s6 = s7;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c465();
                }
                s3 = s4;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_block() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parseblock_pos() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_block_pos() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parsebool() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c466) {
      s0 = peg$c466;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c467); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c468) {
        s0 = peg$c468;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c469); }
      }
    }

    return s0;
  }

  function peg$parse_bool() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c470();
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_component() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parseentities() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c471;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c472); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c473.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c474); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_entities() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c475();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseentity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c471;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c472); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c476.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c477); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_entity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c475();
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_item() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse_message() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse_nbt() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse_nbt_path() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse_player() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c478();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseplayers() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c471;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c472); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c473.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c474); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_players() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c479();
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_rotation() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse_string() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parsevec2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_vec2() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parsevec3() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_vec3() {
    var s0, s1;

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
    }

    return s0;
  }

  function peg$parse___() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c480.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c481); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c480.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c481); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c480.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c481); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c480.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c481); }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c482;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c483); }
    }

    return s0;
  }


    var results = {
      usage: null,
      type: null,
      args: []
    }
    
    function result(usage, type, args) {
      if (args != null) results.args.push(args)
      results.usage = usage
      results.type = type
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
