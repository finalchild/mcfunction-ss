// tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align


// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.1.13 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export class SyntaxError extends Error {
  public static buildMessage(expected: string, found: string) {
    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map((part) => {
          return Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part);
        });

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },

      any(): string {
        return "any character";
      },

      end(): string {
        return "end of input";
      },

      other(expectation): string {
        return expectation.description;
      }
    };

    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected1) {
      const descriptions = expected1.map(describeExpectation);
      let i;
      let j;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: string;
  public found: string;
  public location: any;
  public name: string;

  constructor(message: string, expected: string, found: string, location) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};

  const peg$startRuleFunctions = { start: peg$parsestart };
  let peg$startRuleFunction = peg$parsestart;

  const peg$c0 = function() {return results};
  const peg$c1 = function() {result(null, "command", [
      "advancement",
      "clear",
      "clone",
      "data",
      "datapack",
      "defaultgamemode",
      "difficulty",
      "effect",
      "execute",
      "experience",
      "fill",
      "function",
      "gamemode",
      "gamerule",
      "give",
      "help",
      "kill",
      "locate",
      "me",
      "msg",
      "particle",
      "playsound",
      "recipe",
      "reload",
      "replaceitem",
      "say",
      "scoreboard",
      "seed",
      "setblock",
      "setworldspawn",
      "spawnpoint",
      "spreadplayers",
      "stopsound",
      "summon",
      "tag",
      "team",
      "teleport",
      "tell",
      "tellraw",
      "time",
      "title",
      "tp",
      "trigger",
      "w",
      "weather",
      "worldborder",
      "xp"
      ])};
  const peg$c2 = "advancement";
  const peg$c3 = peg$literalExpectation("advancement", false);
  const peg$c4 = "grant";
  const peg$c5 = peg$literalExpectation("grant", false);
  const peg$c6 = "revoke";
  const peg$c7 = peg$literalExpectation("revoke", false);
  const peg$c8 = "only";
  const peg$c9 = peg$literalExpectation("only", false);
  const peg$c10 = function() {result("[<criterion>]", "criterion", null)};
  const peg$c11 = function() {result("<advancement> [<criterion>]", "advancement", null)};
  const peg$c12 = "from";
  const peg$c13 = peg$literalExpectation("from", false);
  const peg$c14 = "through";
  const peg$c15 = peg$literalExpectation("through", false);
  const peg$c16 = "until";
  const peg$c17 = peg$literalExpectation("until", false);
  const peg$c18 = function() {result("<advancement>", "advancement", null)};
  const peg$c19 = function() {result(null, "literal", ["everything", "from", "only", "through", "until"])};
  const peg$c20 = function() {result("<targets> (everything|from|only|through|until)", "players", null)};
  const peg$c21 = function() {result(null, "literal", ["grant", "revoke"])};
  const peg$c22 = "clear";
  const peg$c23 = peg$literalExpectation("clear", false);
  const peg$c24 = function() {result("[<maxCount>]", "integer", null)};
  const peg$c25 = function() {result("[<item>] [<maxCount>]", "item", null)};
  const peg$c26 = function() {result("<targets> [<item>]", "item", null)};
  const peg$c27 = "clone";
  const peg$c28 = peg$literalExpectation("clone", false);
  const peg$c29 = "filtered";
  const peg$c30 = peg$literalExpectation("filtered", false);
  const peg$c31 = function() {result(null, "literal", ["force", "move", "normal"])};
  const peg$c32 = function() {result("<filter> [force|move|normal]", "block", null)};
  const peg$c33 = "masked";
  const peg$c34 = peg$literalExpectation("masked", false);
  const peg$c35 = "replace";
  const peg$c36 = peg$literalExpectation("replace", false);
  const peg$c37 = function() {result(null, "literal", ["filtered", "masked", "replace"])};
  const peg$c38 = function() {result("<destination> [filtered|masked|replace]", "block_pos", null)};
  const peg$c39 = function() {result("<end> <destination> [filtered|masked|replace]", "block_pos", null)};
  const peg$c40 = function() {result("<begin> <end> <destination> [filtered|masked|replace]", "block_pos", null)};
  const peg$c41 = "data";
  const peg$c42 = peg$literalExpectation("data", false);
  const peg$c43 = "get";
  const peg$c44 = peg$literalExpectation("get", false);
  const peg$c45 = "block";
  const peg$c46 = peg$literalExpectation("block", false);
  const peg$c47 = function() {result("[<scale>]", "float", null)};
  const peg$c48 = function() {result("[<path>] [<scale>]", "nbt_path", null)};
  const peg$c49 = function() {result("<pos> [<path>]", "block_pos", null)};
  const peg$c50 = "entity";
  const peg$c51 = peg$literalExpectation("entity", false);
  const peg$c52 = function() {result("<target> [<path>]", "entity", null)};
  const peg$c53 = function() {result(null, "literal", ["block", "entity"])};
  const peg$c54 = "merge";
  const peg$c55 = peg$literalExpectation("merge", false);
  const peg$c56 = "remove";
  const peg$c57 = peg$literalExpectation("remove", false);
  const peg$c58 = function() {result("[<nbt>]", "nbt", null)};
  const peg$c59 = function() {result("<pos> [<nbt>]", "block_pos", null)};
  const peg$c60 = function() {result("<target> [<nbt>]", "entity", null)};
  const peg$c61 = function() {result(null, "literal", ["get", "merge", "remove"])};
  const peg$c62 = "datapack";
  const peg$c63 = peg$literalExpectation("datapack", false);
  const peg$c64 = "disable";
  const peg$c65 = peg$literalExpectation("disable", false);
  const peg$c66 = function() {result("<name>", "string", null)};
  const peg$c67 = "enable";
  const peg$c68 = peg$literalExpectation("enable", false);
  const peg$c69 = "after";
  const peg$c70 = peg$literalExpectation("after", false);
  const peg$c71 = "before";
  const peg$c72 = peg$literalExpectation("before", false);
  const peg$c73 = function() {result("<existing>", "string", null)};
  const peg$c74 = function() {result(null, "literal", ["after", "before", "first", "last"])};
  const peg$c75 = "list";
  const peg$c76 = peg$literalExpectation("list", false);
  const peg$c77 = function(_) {result(null, "literal", ["available", "enabled"])};
  const peg$c78 = function() {result(null, "literal", ["disable", "enable", "list"])};
  const peg$c79 = "defaultgamemode";
  const peg$c80 = peg$literalExpectation("defaultgamemode", false);
  const peg$c81 = function() {result(null, "literal", ["adventure", "creative", "spectator", "survival"])};
  const peg$c82 = "difficulty";
  const peg$c83 = peg$literalExpectation("difficulty", false);
  const peg$c84 = function() {result(null, "literal", ["easy", "hard", "normal", "peaceful"])};
  const peg$c85 = "effect";
  const peg$c86 = peg$literalExpectation("effect", false);
  const peg$c87 = function() {result("[<effect>]", "mob_effect", null)};
  const peg$c88 = function() {result("<targets> [<effect>]", "entities", null)};
  const peg$c89 = "give";
  const peg$c90 = peg$literalExpectation("give", false);
  const peg$c91 = function() {result("[<hideParticles>]", "bool", null)};
  const peg$c92 = function() {result("[<amplifier>] [<hideParticles>]", "integer", null)};
  const peg$c93 = function() {result("[<seconds>] [<amplifier>]", "integer", null)};
  const peg$c94 = function() {result("[<effect>] [<seconds>]", "mob_effect", null)};
  const peg$c95 = function() {result(null, "literal", ["clear", "give"])};
  const peg$c96 = "execute";
  const peg$c97 = peg$literalExpectation("execute", false);
  const peg$c98 = function() {result(null, "literal", ["align", "as", "at", "if", "offset", "run", "store", "unless"])};
  const peg$c99 = "align";
  const peg$c100 = peg$literalExpectation("align", false);
  const peg$c101 = function() {result("<axes> -> execute", "axes", null)};
  const peg$c102 = "as";
  const peg$c103 = peg$literalExpectation("as", false);
  const peg$c104 = function() {result("<targets> -> execute", "entities", null)};
  const peg$c105 = "at";
  const peg$c106 = peg$literalExpectation("at", false);
  const peg$c107 = "if";
  const peg$c108 = peg$literalExpectation("if", false);
  const peg$c109 = function() {result("<block> -> execute", "block", null)};
  const peg$c110 = function() {result("<pos> <block>", "block_pos", null)};
  const peg$c111 = "blocks";
  const peg$c112 = peg$literalExpectation("blocks", false);
  const peg$c113 = "all";
  const peg$c114 = peg$literalExpectation("all", false);
  const peg$c115 = function() {result(null, "literal", ["all", "masked"])};
  const peg$c116 = function() {result("<destination> (all|masked)", "block_pos", null)};
  const peg$c117 = function() {result("<end> <destination> (all|masked)", "block_pos", null)};
  const peg$c118 = function() {result("<start> <end> <destination> (all|masked)", "block_pos", null)};
  const peg$c119 = function() {result("<entities> -> execute", "entities", null)};
  const peg$c120 = "score";
  const peg$c121 = peg$literalExpectation("score", false);
  const peg$c122 = function() {result("<sourceObjective> -> execute", "objective", null)};
  const peg$c123 = function() {result("<source> <sourceObjective>", "entity", null)};
  const peg$c124 = function() {result(null, "literal", ["<", "<=", "=", ">", ">="])};
  const peg$c125 = function() {result("<targetObjective> (<|<=|=|>|>=)", "objective", null)};
  const peg$c126 = function() {result("<target> <targetObjective> (<|<=|=|>|>=)", "entity", null)};
  const peg$c127 = function() {result(null, "literal", ["block", "blocks", "entity", "score"])};
  const peg$c128 = "offset";
  const peg$c129 = peg$literalExpectation("offset", false);
  const peg$c130 = function() {result("<pos> -> execute", "vec3", null)};
  const peg$c131 = "run";
  const peg$c132 = peg$literalExpectation("run", false);
  const peg$c133 = "store";
  const peg$c134 = peg$literalExpectation("store", false);
  const peg$c135 = "result";
  const peg$c136 = peg$literalExpectation("result", false);
  const peg$c137 = "success";
  const peg$c138 = peg$literalExpectation("success", false);
  const peg$c139 = "byte";
  const peg$c140 = peg$literalExpectation("byte", false);
  const peg$c141 = "double";
  const peg$c142 = peg$literalExpectation("double", false);
  const peg$c143 = "float";
  const peg$c144 = peg$literalExpectation("float", false);
  const peg$c145 = "int";
  const peg$c146 = peg$literalExpectation("int", false);
  const peg$c147 = "long";
  const peg$c148 = peg$literalExpectation("long", false);
  const peg$c149 = "short";
  const peg$c150 = peg$literalExpectation("short", false);
  const peg$c151 = function() {result("<scale> -> execute", "float", null)};
  const peg$c152 = function() {result(null, "literal", ["byte", "double", "float", "int", "long", "short"])};
  const peg$c153 = function() {result("<path> (byte|double|float|int|long|short)", "nbt_path", null)};
  const peg$c154 = function() {result("<pos> <path> (byte|double|float|int|long|short)", "block_pos", null)};
  const peg$c155 = function() {result("<target> <path> (byte|double|float|int|long|short)", "entity", null)};
  const peg$c156 = function() {result("<objective> -> execute", "objective", null)};
  const peg$c157 = function() {result("<targets> <objective>", "entity", null)};
  const peg$c158 = function() {result(null, "literal", ["block", "entity", "score"])};
  const peg$c159 = function() {result(null, "literal", ["result", "success"])};
  const peg$c160 = "unless";
  const peg$c161 = peg$literalExpectation("unless", false);
  const peg$c162 = "experience";
  const peg$c163 = peg$literalExpectation("experience", false);
  const peg$c164 = "xp";
  const peg$c165 = peg$literalExpectation("xp", false);
  const peg$c166 = "add";
  const peg$c167 = peg$literalExpectation("add", false);
  const peg$c168 = "set";
  const peg$c169 = peg$literalExpectation("set", false);
  const peg$c170 = function() {result(null, "literal", ["levels", "points"])};
  const peg$c171 = function() {result("<amount> [levels|points]", "integer", null)};
  const peg$c172 = function() {result("<targets> <amount> [levels|points]", "players", null)};
  const peg$c173 = "query";
  const peg$c174 = peg$literalExpectation("query", false);
  const peg$c175 = function() {result("<targets> (levels|points)", "players", null)};
  const peg$c176 = function() {result(null, "literal", ["add", "query", "set"])};
  const peg$c177 = "fill";
  const peg$c178 = peg$literalExpectation("fill", false);
  const peg$c179 = function() {result("[<filter>]", "block", null)};
  const peg$c180 = function() {result(null, "literal", ["destroy", "hollow", "keep", "outline", "replace"])};
  const peg$c181 = function() {result("<block> [destroy|hollow|keep|outline|replace]", "block", null)};
  const peg$c182 = function() {result("<to> <block> [destroy|hollow|keep|outline|replace]", "block_pos", null)};
  const peg$c183 = function() {result("<from> <to> <block> [destroy|hollow|keep|outline|replace]", "block_pos", null)};
  const peg$c184 = "function";
  const peg$c185 = peg$literalExpectation("function", false);
  const peg$c186 = function() {result("<name>", "function", null)};
  const peg$c187 = "gamemode";
  const peg$c188 = peg$literalExpectation("gamemode", false);
  const peg$c189 = "adventure";
  const peg$c190 = peg$literalExpectation("adventure", false);
  const peg$c191 = "creative";
  const peg$c192 = peg$literalExpectation("creative", false);
  const peg$c193 = "spectator";
  const peg$c194 = peg$literalExpectation("spectator", false);
  const peg$c195 = "survival";
  const peg$c196 = peg$literalExpectation("survival", false);
  const peg$c197 = function() {result("<target>", "player", null)};
  const peg$c198 = "gamerule";
  const peg$c199 = peg$literalExpectation("gamerule", false);
  const peg$c200 = "announceAdvancements";
  const peg$c201 = peg$literalExpectation("announceAdvancements", false);
  const peg$c202 = "commandBlockOutput";
  const peg$c203 = peg$literalExpectation("commandBlockOutput", false);
  const peg$c204 = "disableElytraMovementCheck";
  const peg$c205 = peg$literalExpectation("disableElytraMovementCheck", false);
  const peg$c206 = "doDaylightCycle";
  const peg$c207 = peg$literalExpectation("doDaylightCycle", false);
  const peg$c208 = "doEntityDrops";
  const peg$c209 = peg$literalExpectation("doEntityDrops", false);
  const peg$c210 = "doFireTick";
  const peg$c211 = peg$literalExpectation("doFireTick", false);
  const peg$c212 = "doLimitedCrafting";
  const peg$c213 = peg$literalExpectation("doLimitedCrafting", false);
  const peg$c214 = "doMobLoot";
  const peg$c215 = peg$literalExpectation("doMobLoot", false);
  const peg$c216 = "doMobSpawning";
  const peg$c217 = peg$literalExpectation("doMobSpawning", false);
  const peg$c218 = "doTileDrops";
  const peg$c219 = peg$literalExpectation("doTileDrops", false);
  const peg$c220 = "doWeatherCycle";
  const peg$c221 = peg$literalExpectation("doWeatherCycle", false);
  const peg$c222 = "keepInventory";
  const peg$c223 = peg$literalExpectation("keepInventory", false);
  const peg$c224 = "logAdminCommands";
  const peg$c225 = peg$literalExpectation("logAdminCommands", false);
  const peg$c226 = "mobGriefing";
  const peg$c227 = peg$literalExpectation("mobGriefing", false);
  const peg$c228 = "naturalRegeneration";
  const peg$c229 = peg$literalExpectation("naturalRegeneration", false);
  const peg$c230 = "reducedDebugInfo";
  const peg$c231 = peg$literalExpectation("reducedDebugInfo", false);
  const peg$c232 = "sendCommandFeedback";
  const peg$c233 = peg$literalExpectation("sendCommandFeedback", false);
  const peg$c234 = "showDeathMessages";
  const peg$c235 = peg$literalExpectation("showDeathMessages", false);
  const peg$c236 = "spectatorsGenerateChunks";
  const peg$c237 = peg$literalExpectation("spectatorsGenerateChunks", false);
  const peg$c238 = function() {result("<value>", "bool", null)};
  const peg$c239 = "maxCommandChainLength";
  const peg$c240 = peg$literalExpectation("maxCommandChainLength", false);
  const peg$c241 = "maxEntityCramming";
  const peg$c242 = peg$literalExpectation("maxEntityCramming", false);
  const peg$c243 = "randomTickSpeed";
  const peg$c244 = peg$literalExpectation("randomTickSpeed", false);
  const peg$c245 = "spawnRadius";
  const peg$c246 = peg$literalExpectation("spawnRadius", false);
  const peg$c247 = function() {result("<value>", "integer", null)};
  const peg$c248 = function() {result(null, "literal", ["announceAdvancements", "commandBlockOutput", "disableElytraMovementCheck", "doDaylightCycle", "doEntityDrops", "doFireTick", "doLimitedCrafting", "doMobLoot", "doMobSpawning", "doTileDrops", "doWeatherCycle", "gameLoopFunction", "keepInventory", "logAdminCommands", "maxCommandChainLength", "maxEntityCramming", "mobGriefing", "naturalRegeneration", "randomTickSpeed", "reducedDebugInfo", "sendCommandFeedback", "showDeathMessages", "spawnRadius", "spectatorsGenerateChunks"])};
  const peg$c249 = function() {result("[<count>]", "integer", null)};
  const peg$c250 = function() {result("<item> [<count>]", "item", null)};
  const peg$c251 = function() {result("<targets> <item> [<count>]", "players", null)};
  const peg$c252 = "help";
  const peg$c253 = peg$literalExpectation("help", false);
  const peg$c254 = peg$anyExpectation();
  const peg$c255 = function() {result("<command>", "greedy_string", null)};
  const peg$c256 = "kill";
  const peg$c257 = peg$literalExpectation("kill", false);
  const peg$c258 = function() {result("<targets>", "entities", null)};
  const peg$c259 = "locate";
  const peg$c260 = peg$literalExpectation("locate", false);
  const peg$c261 = function() {result(null, "literal", ["EndCity", "Fortress", "Mansion", "Mineshaft", "Monument", "Stronghold", "Temple", "Village"])};
  const peg$c262 = "me";
  const peg$c263 = peg$literalExpectation("me", false);
  const peg$c264 = function() {result("<action>", "greedy_string", null)};
  const peg$c265 = "msg";
  const peg$c266 = peg$literalExpectation("msg", false);
  const peg$c267 = "tell";
  const peg$c268 = peg$literalExpectation("tell", false);
  const peg$c269 = "w";
  const peg$c270 = peg$literalExpectation("w", false);
  const peg$c271 = function() {result("<message>", "message", null)};
  const peg$c272 = function() {result("<targets> <message>", "players", null)};
  const peg$c273 = "particle";
  const peg$c274 = peg$literalExpectation("particle", false);
  const peg$c275 = "force";
  const peg$c276 = peg$literalExpectation("force", false);
  const peg$c277 = "normal";
  const peg$c278 = peg$literalExpectation("normal", false);
  const peg$c279 = function() {result("<viewers>", "entities", null)};
  const peg$c280 = function() {result(null, "literal", ["force", "normal"])};
  const peg$c281 = function() {result("<count> [force|normal]", "integer", null)};
  const peg$c282 = function() {result("<speed> <count> [force|normal]", "integer", null)};
  const peg$c283 = function() {result("<delta> <speed> <count> [force|normal]", "vec3", null)};
  const peg$c284 = function() {result("<pos> <delta> <speed> <count> [force|normal]", "vec3", null)};
  const peg$c285 = function() {result("<name> <pos> <delta> <speed> <count> [force|normal]", "vec3", null)};
  const peg$c286 = "playsound";
  const peg$c287 = peg$literalExpectation("playsound", false);
  const peg$c288 = "ambient";
  const peg$c289 = peg$literalExpectation("ambient", false);
  const peg$c290 = "hostile";
  const peg$c291 = peg$literalExpectation("hostile", false);
  const peg$c292 = "master";
  const peg$c293 = peg$literalExpectation("master", false);
  const peg$c294 = "music";
  const peg$c295 = peg$literalExpectation("music", false);
  const peg$c296 = "neutral";
  const peg$c297 = peg$literalExpectation("neutral", false);
  const peg$c298 = "player";
  const peg$c299 = peg$literalExpectation("player", false);
  const peg$c300 = "record";
  const peg$c301 = peg$literalExpectation("record", false);
  const peg$c302 = "voice";
  const peg$c303 = peg$literalExpectation("voice", false);
  const peg$c304 = "weather";
  const peg$c305 = peg$literalExpectation("weather", false);
  const peg$c306 = function() {result("[<minVolume>]", "float", null)};
  const peg$c307 = function() {result("[<pitch>] [<minVolume>]", "float", null)};
  const peg$c308 = function() {result("[<volume>] [<pitch>]", "float", null)};
  const peg$c309 = function() {result("<pos> [<volume>]", "vec3", null)};
  const peg$c310 = function() {result("<targets> <pos> [<volume>]", "players", null)};
  const peg$c311 = function() {result(null, "literal", ["ambient", "block", "hostile", "master", "music", "neutral", "player", "record", "voice", "weather"])};
  const peg$c312 = function() {result("<sound> (ambient|block|hostile|master|music|neutral|player|record|voice|weather)", "sound", null)};
  const peg$c313 = "recipe";
  const peg$c314 = peg$literalExpectation("recipe", false);
  const peg$c315 = "take";
  const peg$c316 = peg$literalExpectation("take", false);
  const peg$c317 = function() {result("<recipe>", "recipe", ["*"])};
  const peg$c318 = function() {result("<targets> (*|<recipe>)", "players", null)};
  const peg$c319 = function() {result(null, "literal", ["give", "take"])};
  const peg$c320 = "replaceitem";
  const peg$c321 = peg$literalExpectation("replaceitem", false);
  const peg$c322 = function() {result("<slot> <item> [<count>]", "item_slot", null)};
  const peg$c323 = function() {result("<pos> <slot> <item> [<count>]", "block_pos", null)};
  const peg$c324 = function() {result("<tagets> <slot> <item> [<count>]", "entities", null)};
  const peg$c325 = "say";
  const peg$c326 = peg$literalExpectation("say", false);
  const peg$c327 = "scoreboard";
  const peg$c328 = peg$literalExpectation("scoreboard", false);
  const peg$c329 = "objectives";
  const peg$c330 = peg$literalExpectation("objectives", false);
  const peg$c331 = function() {result("[<displayName>]", "greedy_string", null)};
  const peg$c332 = function() {result("<criteria> [<displayName>]", "objective_criteria", null)};
  const peg$c333 = function() {result("<objective> <criteria> [<displayName>]", "objective", null)};
  const peg$c334 = function() {result("<objective>", "objective", null)};
  const peg$c335 = "setdisplay";
  const peg$c336 = peg$literalExpectation("setdisplay", false);
  const peg$c337 = function() {result("[<objective>]", "objective", null)};
  const peg$c338 = function() {result("<slot> [<objective>]", "scoreboard_slot", null)};
  const peg$c339 = function() {result(null, "literal", ["add", "list", "remove", "setdisplay"])};
  const peg$c340 = "players";
  const peg$c341 = peg$literalExpectation("players", false);
  const peg$c342 = function() {result("<score>", "integer", null)};
  const peg$c343 = function() {result("<objective> <score>", "objective", null)};
  const peg$c344 = function() {result("<targets> <objective> <score>", "entities", null)};
  const peg$c345 = function() {result("<targets> <objective>", "entities", null)};
  const peg$c346 = function() {result("<target> <objective>", "entity", null)};
  const peg$c347 = function() {result("<target>", "entity", null)};
  const peg$c348 = "operation";
  const peg$c349 = peg$literalExpectation("operation", false);
  const peg$c350 = function() {result("<sourceObjective>", "objective", null)};
  const peg$c351 = function() {result("<source> <sourceObjective>", "entities", null)};
  const peg$c352 = function() {result("<operation> <source> <sourceObjective>", "operation", null)};
  const peg$c353 = function() {result("<targetObjective> <operation> <source> <sourceObjective>", "objective", null)};
  const peg$c354 = function() {result("<targets> <targetObjective> <operation> <source> <sourceObjective>", "entities", null)};
  const peg$c355 = "reset";
  const peg$c356 = peg$literalExpectation("reset", false);
  const peg$c357 = function() {result("<targets> [<objective>]", "entities", null)};
  const peg$c358 = function() {result(null, "literal", ["add", "enable", "get", "list", "operation", "remove", "reset", "set"])};
  const peg$c359 = function() {result(null, "literal", ["objectives", "players"])};
  const peg$c360 = "setblock";
  const peg$c361 = peg$literalExpectation("setblock", false);
  const peg$c362 = function() {result(null, "literal", ["destroy", "keep", "replace"])};
  const peg$c363 = function() {result("<block> [destroy|keep|replace]", "block", null)};
  const peg$c364 = function() {result("<pos> <block> [destroy|keep|replace]", "block_pos", null)};
  const peg$c365 = "setworldspawn";
  const peg$c366 = peg$literalExpectation("setworldspawn", false);
  const peg$c367 = function() {result("[<pos>]", "block_pos", null)};
  const peg$c368 = "spawnpoint";
  const peg$c369 = peg$literalExpectation("spawnpoint", false);
  const peg$c370 = function() {result("[<targets>] [<pos>]", "players", null)};
  const peg$c371 = "spreadplayers";
  const peg$c372 = peg$literalExpectation("spreadplayers", false);
  const peg$c373 = function() {result("<respectTeams> <targets>", "bool", null)};
  const peg$c374 = function() {result("<maxRange> <respectTeams> <targets>", "float", null)};
  const peg$c375 = function() {result("<spreadDistance> <maxRange> <respectTeams> <targets>", "float", null)};
  const peg$c376 = function() {result("<center> <spreadDistance> <maxRange> <respectTeams> <targets>", "vec2", null)};
  const peg$c377 = "stopsound";
  const peg$c378 = peg$literalExpectation("stopsound", false);
  const peg$c379 = "*";
  const peg$c380 = peg$literalExpectation("*", false);
  const peg$c381 = function() {result("<sound>", "sound", null)};
  const peg$c382 = function() {result(null, "literal", ["*", "ambient", "block", "hostile", "master", "music", "neutral", "player", "record", "voice", "weather"])};
  const peg$c383 = function() {result("<targets> (*|ambient|block|hostile|master|music|neutral|player|record|voice|weather)", "players", null)};
  const peg$c384 = "summon";
  const peg$c385 = peg$literalExpectation("summon", false);
  const peg$c386 = function() {result("[<pos>] [<nbt>]", "vec3", null)};
  const peg$c387 = function() {result("<entity> [<pos>]", "entity_", null)};
  const peg$c388 = "tag";
  const peg$c389 = peg$literalExpectation("tag", false);
  const peg$c390 = function() {result("<name>", "word", null)};
  const peg$c391 = function() {result(null, "literal", ["add", "list", "remove"])};
  const peg$c392 = function() {result("<targets> (add|list|remove)", "entities", null)};
  const peg$c393 = "team";
  const peg$c394 = peg$literalExpectation("team", false);
  const peg$c395 = function() {result("<team> [<displayName>]", "word", null)};
  const peg$c396 = "empty";
  const peg$c397 = peg$literalExpectation("empty", false);
  const peg$c398 = function() {result("<team>", "team", null)};
  const peg$c399 = "join";
  const peg$c400 = peg$literalExpectation("join", false);
  const peg$c401 = function() {result("[<members>]", "entities", null)};
  const peg$c402 = function() {result("<team> [<members>]", "team", null)};
  const peg$c403 = "leave";
  const peg$c404 = peg$literalExpectation("leave", false);
  const peg$c405 = function() {result("<members>", "entities", null)};
  const peg$c406 = "option";
  const peg$c407 = peg$literalExpectation("option", false);
  const peg$c408 = "collisionRule";
  const peg$c409 = peg$literalExpectation("collisionRule", false);
  const peg$c410 = function() {result(null, "literal", ["always", "never", "pushOtherTeams", "pushOwnTeam"])};
  const peg$c411 = "color";
  const peg$c412 = peg$literalExpectation("color", false);
  const peg$c413 = function() {result("<value>", "color", null)};
  const peg$c414 = "deathMessageVisibility";
  const peg$c415 = peg$literalExpectation("deathMessageVisibility", false);
  const peg$c416 = "nametagVisibility";
  const peg$c417 = peg$literalExpectation("nametagVisibility", false);
  const peg$c418 = function() {result(null, "literal", ["always", "hideForOtherTeams", "hideForOwnTeam", "never"])};
  const peg$c419 = "friendlfire";
  const peg$c420 = peg$literalExpectation("friendlfire", false);
  const peg$c421 = "seeFriendlyInvisibles";
  const peg$c422 = peg$literalExpectation("seeFriendlyInvisibles", false);
  const peg$c423 = function() {result("<allowed>", "bool", null)};
  const peg$c424 = function() {result(null, "literal", ["collisionRule", "color", "deathMessageVisibility", "friendlyfire", "nametagVisibility", "seeFriendlyInvisibles"])};
  const peg$c425 = function() {result("<team> (collisionRule|color|deathMessageVisibility|friendlyfire|nametagVisibility|seeFriendlyInvisibles)", "team", null)};
  const peg$c426 = function() {result(null, "literal", ["add", "empty", "join", "leave", "list", "option", "remove"])};
  const peg$c427 = "tellraw";
  const peg$c428 = peg$literalExpectation("tellraw", false);
  const peg$c429 = function() {result("<message>", "component", null)};
  const peg$c430 = function() {result("<targets> <message>", "entities", null)};
  const peg$c431 = "time";
  const peg$c432 = peg$literalExpectation("time", false);
  const peg$c433 = function() {result("<time>", "integer", null)};
  const peg$c434 = function() {result(null, "literal", ["day", "daytime", "gametime"])};
  const peg$c435 = function() {result("<time>", "literal", ["day", "night"])};
  const peg$c436 = "title";
  const peg$c437 = peg$literalExpectation("title", false);
  const peg$c438 = "actionbar";
  const peg$c439 = peg$literalExpectation("actionbar", false);
  const peg$c440 = "subtitle";
  const peg$c441 = peg$literalExpectation("subtitle", false);
  const peg$c442 = function() {result("<title>", "component", null)};
  const peg$c443 = "times";
  const peg$c444 = peg$literalExpectation("times", false);
  const peg$c445 = function() {result("<fadeOut>", "integer", null)};
  const peg$c446 = function() {result("<stay> <fadeOut>", "integer", null)};
  const peg$c447 = function() {result("<fadeIn> <stay> <fadeOut>", "integer", null)};
  const peg$c448 = function() {result(null, "literal", ["actionbar", "clear", "reset", "subtitle", "times", "title"])};
  const peg$c449 = function() {result("<targets> (actionbar|clear|reset|subtitle|times|title)", "players", null)};
  const peg$c450 = "trigger";
  const peg$c451 = peg$literalExpectation("trigger", false);
  const peg$c452 = function() {result(null, "literal", ["add", "set"])};
  const peg$c453 = function() {result("<objective> [add|set]", "objective", null)};
  const peg$c454 = "rain";
  const peg$c455 = peg$literalExpectation("rain", false);
  const peg$c456 = "thunder";
  const peg$c457 = peg$literalExpectation("thunder", false);
  const peg$c458 = function() {result("[<duration>]", "integer", null)};
  const peg$c459 = function() {result(null, "literal", ["clear", "rain", "thunder"])};
  const peg$c460 = "worldborder";
  const peg$c461 = peg$literalExpectation("worldborder", false);
  const peg$c462 = function() {result("[<time>]", "integer", null)};
  const peg$c463 = function() {result("<distance> [<time>]", "integer", null)};
  const peg$c464 = "center";
  const peg$c465 = peg$literalExpectation("center", false);
  const peg$c466 = function() {result("<pos>", "vec2", null)};
  const peg$c467 = "damage";
  const peg$c468 = peg$literalExpectation("damage", false);
  const peg$c469 = "amount";
  const peg$c470 = peg$literalExpectation("amount", false);
  const peg$c471 = function() {result("<damagePerBlock>", "integer", null)};
  const peg$c472 = "buffer";
  const peg$c473 = peg$literalExpectation("buffer", false);
  const peg$c474 = function() {result("<distance>", "integer", null)};
  const peg$c475 = function() {result(null, "literal", ["amount", "buffer"])};
  const peg$c476 = "warning";
  const peg$c477 = peg$literalExpectation("warning", false);
  const peg$c478 = "distance";
  const peg$c479 = peg$literalExpectation("distance", false);
  const peg$c480 = function() {result(null, "literal", ["distance", "time"])};
  const peg$c481 = function() {result(null, "literal", ["add", "center", "damage", "get", "set", "warning"])};
  const peg$c482 = "[";
  const peg$c483 = peg$literalExpectation("[", false);
  const peg$c484 = ",";
  const peg$c485 = peg$literalExpectation(",", false);
  const peg$c486 = "]";
  const peg$c487 = peg$literalExpectation("]", false);
  const peg$c488 = /^[a-zA-Z0-9\-_]/;
  const peg$c489 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false);
  const peg$c490 = "=";
  const peg$c491 = peg$literalExpectation("=", false);
  const peg$c492 = function() {result(null, null, getAdvancements(workspacePath))};
  const peg$c493 = ":";
  const peg$c494 = peg$literalExpectation(":", false);
  const peg$c495 = function() {
      var blocks = getBlocks(workspacePath)
      result(null, null, blocks.concat(["minecraft:air","minecraft:stone","minecraft:granite","minecraft:polished_granite","minecraft:diorite","minecraft:polished_diorite","minecraft:andesite","minecraft:polished_andesite","minecraft:grass_block","minecraft:dirt","minecraft:coarse_dirt","minecraft:podzol","minecraft:cobblestone","minecraft:oak_planks","minecraft:spruce_planks","minecraft:birch_planks","minecraft:jungle_planks","minecraft:acacia_planks","minecraft:dark_oak_planks","minecraft:oak_sapling","minecraft:spruce_sapling","minecraft:birch_sapling","minecraft:jungle_sapling","minecraft:acacia_sapling","minecraft:dark_oak_sapling","minecraft:bedrock","minecraft:flowing_water","minecraft:water","minecraft:flowing_lava","minecraft:lava","minecraft:sand","minecraft:red_sand","minecraft:gravel","minecraft:gold_ore","minecraft:iron_ore","minecraft:coal_ore","minecraft:oak_log","minecraft:spruce_log","minecraft:birch_log","minecraft:jungle_log","minecraft:acacia_log","minecraft:dark_oak_log","minecraft:oak_bark","minecraft:spruce_bark","minecraft:birch_bark","minecraft:jungle_bark","minecraft:acacia_bark","minecraft:dark_oak_bark","minecraft:oak_leaves","minecraft:spruce_leaves","minecraft:birch_leaves","minecraft:jungle_leaves","minecraft:acacia_leaves","minecraft:dark_oak_leaves","minecraft:sponge","minecraft:wet_sponge","minecraft:glass","minecraft:lapis_ore","minecraft:lapis_block","minecraft:dispenser","minecraft:sandstone","minecraft:chiseled_sandstone","minecraft:cut_sandstone","minecraft:note_block","minecraft:white_bed","minecraft:orange_bed","minecraft:magenta_bed","minecraft:light_blue_bed","minecraft:yellow_bed","minecraft:lime_bed","minecraft:pink_bed","minecraft:gray_bed","minecraft:light_gray_bed","minecraft:cyan_bed","minecraft:purple_bed","minecraft:blue_bed","minecraft:brown_bed","minecraft:green_bed","minecraft:red_bed","minecraft:black_bed","minecraft:powered_rail","minecraft:detector_rail","minecraft:sticky_piston","minecraft:cobweb","minecraft:grass","minecraft:fern","minecraft:dead_bush","minecraft:piston","minecraft:piston_head","minecraft:white_wool","minecraft:orange_wool","minecraft:magenta_wool","minecraft:light_blue_wool","minecraft:yellow_wool","minecraft:lime_wool","minecraft:pink_wool","minecraft:gray_wool","minecraft:light_gray_wool","minecraft:cyan_wool","minecraft:purple_wool","minecraft:blue_wool","minecraft:brown_wool","minecraft:green_wool","minecraft:red_wool","minecraft:black_wool","minecraft:moving_piston","minecraft:dandelion","minecraft:poppy","minecraft:blue_orchid","minecraft:allium","minecraft:azure_bluet","minecraft:red_tulip","minecraft:orange_tulip","minecraft:white_tulip","minecraft:pink_tulip","minecraft:oxeye_daisy","minecraft:brown_mushroom","minecraft:red_mushroom","minecraft:gold_block","minecraft:iron_block","minecraft:oak_slab","minecraft:spruce_slab","minecraft:birch_slab","minecraft:jungle_slab","minecraft:acacia_slab","minecraft:dark_oak_slab","minecraft:stone_slab","minecraft:sandstone_slab","minecraft:petrified_oak_slab","minecraft:cobblestone_slab","minecraft:brick_slab","minecraft:stone_brick_slab","minecraft:nether_brick_slab","minecraft:quartz_slab","minecraft:red_sandstone_slab","minecraft:purpur_slab","minecraft:smooth_stone","minecraft:smooth_sandstone","minecraft:smooth_quartz","minecraft:smooth_red_sandstone","minecraft:bricks","minecraft:tnt","minecraft:bookshelf","minecraft:mossy_cobblestone","minecraft:obsidian","minecraft:torch","minecraft:wall_torch","minecraft:fire","minecraft:mob_spawner","minecraft:oak_stairs","minecraft:chest","minecraft:redstone_wire","minecraft:diamond_ore","minecraft:diamond_block","minecraft:crafting_table","minecraft:wheat","minecraft:farmland","minecraft:furnace","minecraft:sign","minecraft:oak_door","minecraft:spruce_door","minecraft:birch_door","minecraft:jungle_door","minecraft:acacia_door","minecraft:dark_oak_door","minecraft:ladder","minecraft:rail","minecraft:cobblestone_stairs","minecraft:wall_sign","minecraft:lever","minecraft:stone_pressure_plate","minecraft:iron_door","minecraft:oak_pressure_plate","minecraft:spruce_pressure_plate","minecraft:birch_pressure_plate","minecraft:jungle_pressure_plate","minecraft:acacia_pressure_plate","minecraft:dark_oak_pressure_plate","minecraft:redstone_ore","minecraft:redstone_torch","minecraft:redstone_wall_torch","minecraft:stone_button","minecraft:snow","minecraft:ice","minecraft:snow_block","minecraft:cactus","minecraft:clay","minecraft:sugar_cane","minecraft:jukebox","minecraft:oak_fence","minecraft:spruce_fence","minecraft:birch_fence","minecraft:jungle_fence","minecraft:dark_oak_fence","minecraft:acacia_fence","minecraft:pumpkin","minecraft:netherrack","minecraft:soul_sand","minecraft:glowstone","minecraft:portal","minecraft:carved_pumpkin","minecraft:jack_o_lantern","minecraft:cake","minecraft:repeater","minecraft:oak_trapdoor","minecraft:spruce_trapdoor","minecraft:birch_trapdoor","minecraft:jungle_trapdoor","minecraft:acacia_trapdoor","minecraft:dark_oak_trapdoor","minecraft:infested_stone","minecraft:infested_cobblestone","minecraft:infested_stone_bricks","minecraft:infested_mossy_stone_bricks","minecraft:infested_cracked_stone_bricks","minecraft:infested_chiseled_stone_bricks","minecraft:stone_bricks","minecraft:mossy_stone_bricks","minecraft:cracked_stone_bricks","minecraft:chiseled_stone_bricks","minecraft:brown_mushroom_block","minecraft:red_mushroom_block","minecraft:mushroom_stem","minecraft:iron_bars","minecraft:glass_pane","minecraft:melon_block","minecraft:attached_pumpkin_stem","minecraft:attached_melon_stem","minecraft:pumpkin_stem","minecraft:melon_stem","minecraft:vine","minecraft:oak_fence_gate","minecraft:spruce_fence_gate","minecraft:birch_fence_gate","minecraft:jungle_fence_gate","minecraft:dark_oak_fence_gate","minecraft:acacia_fence_gate","minecraft:brick_stairs","minecraft:stone_brick_stairs","minecraft:mycelium","minecraft:lily_pad","minecraft:nether_bricks","minecraft:nether_brick_fence","minecraft:nether_brick_stairs","minecraft:nether_wart","minecraft:enchanting_table","minecraft:brewing_stand","minecraft:cauldron","minecraft:end_portal","minecraft:end_portal_frame","minecraft:end_stone","minecraft:dragon_egg","minecraft:redstone_lamp","minecraft:cocoa","minecraft:sandstone_stairs","minecraft:emerald_ore","minecraft:ender_chest","minecraft:tripwire_hook","minecraft:tripwire","minecraft:emerald_block","minecraft:spruce_stairs","minecraft:birch_stairs","minecraft:jungle_stairs","minecraft:command_block","minecraft:beacon","minecraft:cobblestone_wall","minecraft:mossy_cobblestone_wall","minecraft:flower_pot","minecraft:potted_poppy","minecraft:potted_blue_orchid","minecraft:potted_allium","minecraft:potted_azure_bluet","minecraft:potted_red_tulip","minecraft:potted_orange_tulip","minecraft:potted_white_tulip","minecraft:potted_pink_tulip","minecraft:potted_oxeye_daisy","minecraft:potted_dandelion","minecraft:potted_oak_sapling","minecraft:potted_spruce_sapling","minecraft:potted_birch_sapling","minecraft:potted_jungle_sapling","minecraft:potted_acacia_sapling","minecraft:potted_dark_oak_sapling","minecraft:potted_red_mushroom","minecraft:potted_brown_mushroom","minecraft:potted_dead_bush","minecraft:potted_fern","minecraft:potted_cactus","minecraft:carrots","minecraft:potatoes","minecraft:oak_button","minecraft:spruce_button","minecraft:birch_button","minecraft:jungle_button","minecraft:acacia_button","minecraft:dark_oak_button","minecraft:skeleton_wall_skull","minecraft:skeleton_skull","minecraft:wither_skeleton_wall_skull","minecraft:wither_skeleton_skull","minecraft:zombie_wall_head","minecraft:zombie_head","minecraft:player_wall_head","minecraft:player_head","minecraft:creeper_wall_head","minecraft:creeper_head","minecraft:dragon_wall_head","minecraft:dragon_head","minecraft:anvil","minecraft:chipped_anvil","minecraft:damaged_anvil","minecraft:trapped_chest","minecraft:light_weighted_pressure_plate","minecraft:heavy_weighted_pressure_plate","minecraft:comparator","minecraft:daylight_detector","minecraft:redstone_block","minecraft:nether_quartz_ore","minecraft:hopper","minecraft:quartz_block","minecraft:quartz_pillar","minecraft:chiseled_quartz_block","minecraft:quartz_stairs","minecraft:activator_rail","minecraft:dropper","minecraft:white_terracotta","minecraft:orange_terracotta","minecraft:magenta_terracotta","minecraft:light_blue_terracotta","minecraft:yellow_terracotta","minecraft:lime_terracotta","minecraft:pink_terracotta","minecraft:gray_terracotta","minecraft:light_gray_terracotta","minecraft:cyan_terracotta","minecraft:purple_terracotta","minecraft:blue_terracotta","minecraft:brown_terracotta","minecraft:green_terracotta","minecraft:red_terracotta","minecraft:black_terracotta","minecraft:barrier","minecraft:iron_trapdoor","minecraft:hay_block","minecraft:white_carpet","minecraft:orange_carpet","minecraft:magenta_carpet","minecraft:light_blue_carpet","minecraft:yellow_carpet","minecraft:lime_carpet","minecraft:pink_carpet","minecraft:gray_carpet","minecraft:light_gray_carpet","minecraft:cyan_carpet","minecraft:purple_carpet","minecraft:blue_carpet","minecraft:brown_carpet","minecraft:green_carpet","minecraft:red_carpet","minecraft:black_carpet","minecraft:terracotta","minecraft:coal_block","minecraft:packed_ice","minecraft:acacia_stairs","minecraft:dark_oak_stairs","minecraft:slime_block","minecraft:sunflower","minecraft:lilac","minecraft:rose_bush","minecraft:peony","minecraft:tall_grass","minecraft:large_fern","minecraft:white_stained_glass","minecraft:orange_stained_glass","minecraft:magenta_stained_glass","minecraft:light_blue_stained_glass","minecraft:yellow_stained_glass","minecraft:lime_stained_glass","minecraft:pink_stained_glass","minecraft:gray_stained_glass","minecraft:light_gray_stained_glass","minecraft:cyan_stained_glass","minecraft:purple_stained_glass","minecraft:blue_stained_glass","minecraft:brown_stained_glass","minecraft:green_stained_glass","minecraft:red_stained_glass","minecraft:black_stained_glass","minecraft:white_stained_glass_pane","minecraft:orange_stained_glass_pane","minecraft:magenta_stained_glass_pane","minecraft:light_blue_stained_glass_pane","minecraft:yellow_stained_glass_pane","minecraft:lime_stained_glass_pane","minecraft:pink_stained_glass_pane","minecraft:gray_stained_glass_pane","minecraft:light_gray_stained_glass_pane","minecraft:cyan_stained_glass_pane","minecraft:purple_stained_glass_pane","minecraft:blue_stained_glass_pane","minecraft:brown_stained_glass_pane","minecraft:green_stained_glass_pane","minecraft:red_stained_glass_pane","minecraft:black_stained_glass_pane","minecraft:prismarine","minecraft:prismarine_bricks","minecraft:dark_prismarine","minecraft:sea_lantern","minecraft:white_banner","minecraft:orange_banner","minecraft:magenta_banner","minecraft:light_blue_banner","minecraft:yellow_banner","minecraft:lime_banner","minecraft:pink_banner","minecraft:gray_banner","minecraft:light_gray_banner","minecraft:cyan_banner","minecraft:purple_banner","minecraft:blue_banner","minecraft:brown_banner","minecraft:green_banner","minecraft:red_banner","minecraft:black_banner","minecraft:white_wall_banner","minecraft:orange_wall_banner","minecraft:magenta_wall_banner","minecraft:light_blue_wall_banner","minecraft:yellow_wall_banner","minecraft:lime_wall_banner","minecraft:pink_wall_banner","minecraft:gray_wall_banner","minecraft:light_gray_wall_banner","minecraft:cyan_wall_banner","minecraft:purple_wall_banner","minecraft:blue_wall_banner","minecraft:brown_wall_banner","minecraft:green_wall_banner","minecraft:red_wall_banner","minecraft:black_wall_banner","minecraft:red_sandstone","minecraft:chiseled_red_sandstone","minecraft:cut_red_sandstone","minecraft:red_sandstone_stairs","minecraft:end_rod","minecraft:chorus_plant","minecraft:chorus_flower","minecraft:purpur_block","minecraft:purpur_pillar","minecraft:purpur_stairs","minecraft:end_stone_bricks","minecraft:beetroots","minecraft:grass_path","minecraft:end_gateway","minecraft:repeating_command_block","minecraft:chain_command_block","minecraft:frosted_ice","minecraft:magma_block","minecraft:nether_wart_block","minecraft:red_nether_bricks","minecraft:bone_block","minecraft:structure_void","minecraft:observer","minecraft:white_shulker_box","minecraft:orange_shulker_box","minecraft:magenta_shulker_box","minecraft:light_blue_shulker_box","minecraft:yellow_shulker_box","minecraft:lime_shulker_box","minecraft:pink_shulker_box","minecraft:gray_shulker_box","minecraft:light_gray_shulker_box","minecraft:cyan_shulker_box","minecraft:purple_shulker_box","minecraft:blue_shulker_box","minecraft:brown_shulker_box","minecraft:green_shulker_box","minecraft:red_shulker_box","minecraft:black_shulker_box","minecraft:white_glazed_terracotta","minecraft:orange_glazed_terracotta","minecraft:magenta_glazed_terracotta","minecraft:light_blue_glazed_terracotta","minecraft:yellow_glazed_terracotta","minecraft:lime_glazed_terracotta","minecraft:pink_glazed_terracotta","minecraft:gray_glazed_terracotta","minecraft:light_gray_glazed_terracotta","minecraft:cyan_glazed_terracotta","minecraft:purple_glazed_terracotta","minecraft:blue_glazed_terracotta","minecraft:brown_glazed_terracotta","minecraft:green_glazed_terracotta","minecraft:red_glazed_terracotta","minecraft:black_glazed_terracotta","minecraft:white_concrete","minecraft:orange_concrete","minecraft:magenta_concrete","minecraft:light_blue_concrete","minecraft:yellow_concrete","minecraft:lime_concrete","minecraft:pink_concrete","minecraft:gray_concrete","minecraft:light_gray_concrete","minecraft:cyan_concrete","minecraft:purple_concrete","minecraft:blue_concrete","minecraft:brown_concrete","minecraft:green_concrete","minecraft:red_concrete","minecraft:black_concrete","minecraft:white_concrete_powder","minecraft:orange_concrete_powder","minecraft:magenta_concrete_powder","minecraft:light_blue_concrete_powder","minecraft:yellow_concrete_powder","minecraft:lime_concrete_powder","minecraft:pink_concrete_powder","minecraft:gray_concrete_powder","minecraft:light_gray_concrete_powder","minecraft:cyan_concrete_powder","minecraft:purple_concrete_powder","minecraft:blue_concrete_powder","minecraft:brown_concrete_powder","minecraft:green_concrete_powder","minecraft:red_concrete_powder","minecraft:black_concrete_powder","minecraft:structure_block"]))};
  const peg$c496 = "false";
  const peg$c497 = peg$literalExpectation("false", false);
  const peg$c498 = "true";
  const peg$c499 = peg$literalExpectation("true", false);
  const peg$c500 = function() {result(null, null, ["false", "true"])};
  const peg$c501 = "sort";
  const peg$c502 = peg$literalExpectation("sort", false);
  const peg$c503 = "x";
  const peg$c504 = peg$literalExpectation("x", false);
  const peg$c505 = "y";
  const peg$c506 = peg$literalExpectation("y", false);
  const peg$c507 = "z";
  const peg$c508 = peg$literalExpectation("z", false);
  const peg$c509 = "dx";
  const peg$c510 = peg$literalExpectation("dx", false);
  const peg$c511 = "dy";
  const peg$c512 = peg$literalExpectation("dy", false);
  const peg$c513 = "dz";
  const peg$c514 = peg$literalExpectation("dz", false);
  const peg$c515 = "level";
  const peg$c516 = peg$literalExpectation("level", false);
  const peg$c517 = "x_rotation";
  const peg$c518 = peg$literalExpectation("x_rotation", false);
  const peg$c519 = "y_rotation";
  const peg$c520 = peg$literalExpectation("y_rotation", false);
  const peg$c521 = "limit";
  const peg$c522 = peg$literalExpectation("limit", false);
  const peg$c523 = /^[^,\]]/;
  const peg$c524 = peg$classExpectation([",", "]"], true, false);
  const peg$c525 = "type";
  const peg$c526 = peg$literalExpectation("type", false);
  const peg$c527 = "!";
  const peg$c528 = peg$literalExpectation("!", false);
  const peg$c529 = "scores";
  const peg$c530 = peg$literalExpectation("scores", false);
  const peg$c531 = "advancements";
  const peg$c532 = peg$literalExpectation("advancements", false);
  const peg$c533 = "nbt=";
  const peg$c534 = peg$literalExpectation("nbt=", false);
  const peg$c535 = "name=";
  const peg$c536 = peg$literalExpectation("name=", false);
  const peg$c537 = /^[a-z_]/;
  const peg$c538 = peg$classExpectation([["a", "z"], "_"], false, false);
  const peg$c539 = function() {result(null, null, ["="])};
  const peg$c540 = function() {result(null, null, ["gamemode", "level", "x", "y", "z", "dx", "dy", "dz", "distance", "x_rotation", "y_rotation", "limit", "name", "nbt", "tag", "type", "sort", "scores", "advancements"])};
  const peg$c541 = "@";
  const peg$c542 = peg$literalExpectation("@", false);
  const peg$c543 = /^[parse]/;
  const peg$c544 = peg$classExpectation(["p", "a", "r", "s", "e"], false, false);
  const peg$c545 = function() {result(null, null, ["["])};
  const peg$c546 = function() {result(null, null, ["@p", "@a", "@r", "@s", "@e"])};
  const peg$c547 = function(_) {
      result(null, null, getFunctions(workspacePath))
    };
  const peg$c548 = function() {
      var items = getItems(workspacePath)
      result(null, null, items.concat(["minecraft:air","minecraft:stone","minecraft:granite","minecraft:polished_granite","minecraft:diorite","minecraft:polished_diorite","minecraft:andesite","minecraft:polished_andesite","minecraft:grass_block","minecraft:dirt","minecraft:coarse_dirt","minecraft:podzol","minecraft:cobblestone","minecraft:oak_planks","minecraft:spruce_planks","minecraft:birch_planks","minecraft:jungle_planks","minecraft:acacia_planks","minecraft:dark_oak_planks","minecraft:oak_sapling","minecraft:spruce_sapling","minecraft:birch_sapling","minecraft:jungle_sapling","minecraft:acacia_sapling","minecraft:dark_oak_sapling","minecraft:bedrock","minecraft:flowing_water","minecraft:water","minecraft:flowing_lava","minecraft:lava","minecraft:sand","minecraft:red_sand","minecraft:gravel","minecraft:gold_ore","minecraft:iron_ore","minecraft:coal_ore","minecraft:oak_log","minecraft:spruce_log","minecraft:birch_log","minecraft:jungle_log","minecraft:acacia_log","minecraft:dark_oak_log","minecraft:oak_bark","minecraft:spruce_bark","minecraft:birch_bark","minecraft:jungle_bark","minecraft:acacia_bark","minecraft:dark_oak_bark","minecraft:oak_leaves","minecraft:spruce_leaves","minecraft:birch_leaves","minecraft:jungle_leaves","minecraft:acacia_leaves","minecraft:dark_oak_leaves","minecraft:sponge","minecraft:wet_sponge","minecraft:glass","minecraft:lapis_ore","minecraft:lapis_block","minecraft:dispenser","minecraft:sandstone","minecraft:chiseled_sandstone","minecraft:cut_sandstone","minecraft:note_block","minecraft:white_bed","minecraft:orange_bed","minecraft:magenta_bed","minecraft:light_blue_bed","minecraft:yellow_bed","minecraft:lime_bed","minecraft:pink_bed","minecraft:gray_bed","minecraft:light_gray_bed","minecraft:cyan_bed","minecraft:purple_bed","minecraft:blue_bed","minecraft:brown_bed","minecraft:green_bed","minecraft:red_bed","minecraft:black_bed","minecraft:powered_rail","minecraft:detector_rail","minecraft:sticky_piston","minecraft:cobweb","minecraft:grass","minecraft:fern","minecraft:dead_bush","minecraft:piston","minecraft:piston_head","minecraft:white_wool","minecraft:orange_wool","minecraft:magenta_wool","minecraft:light_blue_wool","minecraft:yellow_wool","minecraft:lime_wool","minecraft:pink_wool","minecraft:gray_wool","minecraft:light_gray_wool","minecraft:cyan_wool","minecraft:purple_wool","minecraft:blue_wool","minecraft:brown_wool","minecraft:green_wool","minecraft:red_wool","minecraft:black_wool","minecraft:moving_piston","minecraft:dandelion","minecraft:poppy","minecraft:blue_orchid","minecraft:allium","minecraft:azure_bluet","minecraft:red_tulip","minecraft:orange_tulip","minecraft:white_tulip","minecraft:pink_tulip","minecraft:oxeye_daisy","minecraft:brown_mushroom","minecraft:red_mushroom","minecraft:gold_block","minecraft:iron_block","minecraft:oak_slab","minecraft:spruce_slab","minecraft:birch_slab","minecraft:jungle_slab","minecraft:acacia_slab","minecraft:dark_oak_slab","minecraft:stone_slab","minecraft:sandstone_slab","minecraft:petrified_oak_slab","minecraft:cobblestone_slab","minecraft:brick_slab","minecraft:stone_brick_slab","minecraft:nether_brick_slab","minecraft:quartz_slab","minecraft:red_sandstone_slab","minecraft:purpur_slab","minecraft:smooth_stone","minecraft:smooth_sandstone","minecraft:smooth_quartz","minecraft:smooth_red_sandstone","minecraft:bricks","minecraft:tnt","minecraft:bookshelf","minecraft:mossy_cobblestone","minecraft:obsidian","minecraft:torch","minecraft:wall_torch","minecraft:fire","minecraft:mob_spawner","minecraft:oak_stairs","minecraft:chest","minecraft:redstone_wire","minecraft:diamond_ore","minecraft:diamond_block","minecraft:crafting_table","minecraft:wheat","minecraft:farmland","minecraft:furnace","minecraft:sign","minecraft:oak_door","minecraft:spruce_door","minecraft:birch_door","minecraft:jungle_door","minecraft:acacia_door","minecraft:dark_oak_door","minecraft:ladder","minecraft:rail","minecraft:cobblestone_stairs","minecraft:wall_sign","minecraft:lever","minecraft:stone_pressure_plate","minecraft:iron_door","minecraft:oak_pressure_plate","minecraft:spruce_pressure_plate","minecraft:birch_pressure_plate","minecraft:jungle_pressure_plate","minecraft:acacia_pressure_plate","minecraft:dark_oak_pressure_plate","minecraft:redstone_ore","minecraft:redstone_torch","minecraft:redstone_wall_torch","minecraft:stone_button","minecraft:snow","minecraft:ice","minecraft:snow_block","minecraft:cactus","minecraft:clay","minecraft:sugar_cane","minecraft:jukebox","minecraft:oak_fence","minecraft:spruce_fence","minecraft:birch_fence","minecraft:jungle_fence","minecraft:dark_oak_fence","minecraft:acacia_fence","minecraft:pumpkin","minecraft:netherrack","minecraft:soul_sand","minecraft:glowstone","minecraft:portal","minecraft:carved_pumpkin","minecraft:jack_o_lantern","minecraft:cake","minecraft:repeater","minecraft:oak_trapdoor","minecraft:spruce_trapdoor","minecraft:birch_trapdoor","minecraft:jungle_trapdoor","minecraft:acacia_trapdoor","minecraft:dark_oak_trapdoor","minecraft:infested_stone","minecraft:infested_cobblestone","minecraft:infested_stone_bricks","minecraft:infested_mossy_stone_bricks","minecraft:infested_cracked_stone_bricks","minecraft:infested_chiseled_stone_bricks","minecraft:stone_bricks","minecraft:mossy_stone_bricks","minecraft:cracked_stone_bricks","minecraft:chiseled_stone_bricks","minecraft:brown_mushroom_block","minecraft:red_mushroom_block","minecraft:mushroom_stem","minecraft:iron_bars","minecraft:glass_pane","minecraft:melon_block","minecraft:attached_pumpkin_stem","minecraft:attached_melon_stem","minecraft:pumpkin_stem","minecraft:melon_stem","minecraft:vine","minecraft:oak_fence_gate","minecraft:spruce_fence_gate","minecraft:birch_fence_gate","minecraft:jungle_fence_gate","minecraft:dark_oak_fence_gate","minecraft:acacia_fence_gate","minecraft:brick_stairs","minecraft:stone_brick_stairs","minecraft:mycelium","minecraft:lily_pad","minecraft:nether_bricks","minecraft:nether_brick_fence","minecraft:nether_brick_stairs","minecraft:nether_wart","minecraft:enchanting_table","minecraft:brewing_stand","minecraft:cauldron","minecraft:end_portal","minecraft:end_portal_frame","minecraft:end_stone","minecraft:dragon_egg","minecraft:redstone_lamp","minecraft:cocoa","minecraft:sandstone_stairs","minecraft:emerald_ore","minecraft:ender_chest","minecraft:tripwire_hook","minecraft:tripwire","minecraft:emerald_block","minecraft:spruce_stairs","minecraft:birch_stairs","minecraft:jungle_stairs","minecraft:command_block","minecraft:beacon","minecraft:cobblestone_wall","minecraft:mossy_cobblestone_wall","minecraft:flower_pot","minecraft:potted_poppy","minecraft:potted_blue_orchid","minecraft:potted_allium","minecraft:potted_azure_bluet","minecraft:potted_red_tulip","minecraft:potted_orange_tulip","minecraft:potted_white_tulip","minecraft:potted_pink_tulip","minecraft:potted_oxeye_daisy","minecraft:potted_dandelion","minecraft:potted_oak_sapling","minecraft:potted_spruce_sapling","minecraft:potted_birch_sapling","minecraft:potted_jungle_sapling","minecraft:potted_acacia_sapling","minecraft:potted_dark_oak_sapling","minecraft:potted_red_mushroom","minecraft:potted_brown_mushroom","minecraft:potted_dead_bush","minecraft:potted_fern","minecraft:potted_cactus","minecraft:carrots","minecraft:potatoes","minecraft:oak_button","minecraft:spruce_button","minecraft:birch_button","minecraft:jungle_button","minecraft:acacia_button","minecraft:dark_oak_button","minecraft:skeleton_wall_skull","minecraft:skeleton_skull","minecraft:wither_skeleton_wall_skull","minecraft:wither_skeleton_skull","minecraft:zombie_wall_head","minecraft:zombie_head","minecraft:player_wall_head","minecraft:player_head","minecraft:creeper_wall_head","minecraft:creeper_head","minecraft:dragon_wall_head","minecraft:dragon_head","minecraft:anvil","minecraft:chipped_anvil","minecraft:damaged_anvil","minecraft:trapped_chest","minecraft:light_weighted_pressure_plate","minecraft:heavy_weighted_pressure_plate","minecraft:comparator","minecraft:daylight_detector","minecraft:redstone_block","minecraft:nether_quartz_ore","minecraft:hopper","minecraft:quartz_block","minecraft:quartz_pillar","minecraft:chiseled_quartz_block","minecraft:quartz_stairs","minecraft:activator_rail","minecraft:dropper","minecraft:white_terracotta","minecraft:orange_terracotta","minecraft:magenta_terracotta","minecraft:light_blue_terracotta","minecraft:yellow_terracotta","minecraft:lime_terracotta","minecraft:pink_terracotta","minecraft:gray_terracotta","minecraft:light_gray_terracotta","minecraft:cyan_terracotta","minecraft:purple_terracotta","minecraft:blue_terracotta","minecraft:brown_terracotta","minecraft:green_terracotta","minecraft:red_terracotta","minecraft:black_terracotta","minecraft:barrier","minecraft:iron_trapdoor","minecraft:hay_block","minecraft:white_carpet","minecraft:orange_carpet","minecraft:magenta_carpet","minecraft:light_blue_carpet","minecraft:yellow_carpet","minecraft:lime_carpet","minecraft:pink_carpet","minecraft:gray_carpet","minecraft:light_gray_carpet","minecraft:cyan_carpet","minecraft:purple_carpet","minecraft:blue_carpet","minecraft:brown_carpet","minecraft:green_carpet","minecraft:red_carpet","minecraft:black_carpet","minecraft:terracotta","minecraft:coal_block","minecraft:packed_ice","minecraft:acacia_stairs","minecraft:dark_oak_stairs","minecraft:slime_block","minecraft:sunflower","minecraft:lilac","minecraft:rose_bush","minecraft:peony","minecraft:tall_grass","minecraft:large_fern","minecraft:white_stained_glass","minecraft:orange_stained_glass","minecraft:magenta_stained_glass","minecraft:light_blue_stained_glass","minecraft:yellow_stained_glass","minecraft:lime_stained_glass","minecraft:pink_stained_glass","minecraft:gray_stained_glass","minecraft:light_gray_stained_glass","minecraft:cyan_stained_glass","minecraft:purple_stained_glass","minecraft:blue_stained_glass","minecraft:brown_stained_glass","minecraft:green_stained_glass","minecraft:red_stained_glass","minecraft:black_stained_glass","minecraft:white_stained_glass_pane","minecraft:orange_stained_glass_pane","minecraft:magenta_stained_glass_pane","minecraft:light_blue_stained_glass_pane","minecraft:yellow_stained_glass_pane","minecraft:lime_stained_glass_pane","minecraft:pink_stained_glass_pane","minecraft:gray_stained_glass_pane","minecraft:light_gray_stained_glass_pane","minecraft:cyan_stained_glass_pane","minecraft:purple_stained_glass_pane","minecraft:blue_stained_glass_pane","minecraft:brown_stained_glass_pane","minecraft:green_stained_glass_pane","minecraft:red_stained_glass_pane","minecraft:black_stained_glass_pane","minecraft:prismarine","minecraft:prismarine_bricks","minecraft:dark_prismarine","minecraft:sea_lantern","minecraft:white_banner","minecraft:orange_banner","minecraft:magenta_banner","minecraft:light_blue_banner","minecraft:yellow_banner","minecraft:lime_banner","minecraft:pink_banner","minecraft:gray_banner","minecraft:light_gray_banner","minecraft:cyan_banner","minecraft:purple_banner","minecraft:blue_banner","minecraft:brown_banner","minecraft:green_banner","minecraft:red_banner","minecraft:black_banner","minecraft:white_wall_banner","minecraft:orange_wall_banner","minecraft:magenta_wall_banner","minecraft:light_blue_wall_banner","minecraft:yellow_wall_banner","minecraft:lime_wall_banner","minecraft:pink_wall_banner","minecraft:gray_wall_banner","minecraft:light_gray_wall_banner","minecraft:cyan_wall_banner","minecraft:purple_wall_banner","minecraft:blue_wall_banner","minecraft:brown_wall_banner","minecraft:green_wall_banner","minecraft:red_wall_banner","minecraft:black_wall_banner","minecraft:red_sandstone","minecraft:chiseled_red_sandstone","minecraft:cut_red_sandstone","minecraft:red_sandstone_stairs","minecraft:end_rod","minecraft:chorus_plant","minecraft:chorus_flower","minecraft:purpur_block","minecraft:purpur_pillar","minecraft:purpur_stairs","minecraft:end_stone_bricks","minecraft:beetroots","minecraft:grass_path","minecraft:end_gateway","minecraft:repeating_command_block","minecraft:chain_command_block","minecraft:frosted_ice","minecraft:magma_block","minecraft:nether_wart_block","minecraft:red_nether_bricks","minecraft:bone_block","minecraft:structure_void","minecraft:observer","minecraft:white_shulker_box","minecraft:orange_shulker_box","minecraft:magenta_shulker_box","minecraft:light_blue_shulker_box","minecraft:yellow_shulker_box","minecraft:lime_shulker_box","minecraft:pink_shulker_box","minecraft:gray_shulker_box","minecraft:light_gray_shulker_box","minecraft:cyan_shulker_box","minecraft:purple_shulker_box","minecraft:blue_shulker_box","minecraft:brown_shulker_box","minecraft:green_shulker_box","minecraft:red_shulker_box","minecraft:black_shulker_box","minecraft:white_glazed_terracotta","minecraft:orange_glazed_terracotta","minecraft:magenta_glazed_terracotta","minecraft:light_blue_glazed_terracotta","minecraft:yellow_glazed_terracotta","minecraft:lime_glazed_terracotta","minecraft:pink_glazed_terracotta","minecraft:gray_glazed_terracotta","minecraft:light_gray_glazed_terracotta","minecraft:cyan_glazed_terracotta","minecraft:purple_glazed_terracotta","minecraft:blue_glazed_terracotta","minecraft:brown_glazed_terracotta","minecraft:green_glazed_terracotta","minecraft:red_glazed_terracotta","minecraft:black_glazed_terracotta","minecraft:white_concrete","minecraft:orange_concrete","minecraft:magenta_concrete","minecraft:light_blue_concrete","minecraft:yellow_concrete","minecraft:lime_concrete","minecraft:pink_concrete","minecraft:gray_concrete","minecraft:light_gray_concrete","minecraft:cyan_concrete","minecraft:purple_concrete","minecraft:blue_concrete","minecraft:brown_concrete","minecraft:green_concrete","minecraft:red_concrete","minecraft:black_concrete","minecraft:white_concrete_powder","minecraft:orange_concrete_powder","minecraft:magenta_concrete_powder","minecraft:light_blue_concrete_powder","minecraft:yellow_concrete_powder","minecraft:lime_concrete_powder","minecraft:pink_concrete_powder","minecraft:gray_concrete_powder","minecraft:light_gray_concrete_powder","minecraft:cyan_concrete_powder","minecraft:purple_concrete_powder","minecraft:blue_concrete_powder","minecraft:brown_concrete_powder","minecraft:green_concrete_powder","minecraft:red_concrete_powder","minecraft:black_concrete_powder","minecraft:structure_block","minecraft:iron_shovel","minecraft:iron_pickaxe","minecraft:iron_axe","minecraft:flint_and_steel","minecraft:apple","minecraft:bow","minecraft:arrow","minecraft:coal","minecraft:charcoal","minecraft:diamond","minecraft:iron_ingot","minecraft:gold_ingot","minecraft:iron_sword","minecraft:wooden_sword","minecraft:wooden_shovel","minecraft:wooden_pickaxe","minecraft:wooden_axe","minecraft:stone_sword","minecraft:stone_shovel","minecraft:stone_pickaxe","minecraft:stone_axe","minecraft:diamond_sword","minecraft:diamond_shovel","minecraft:diamond_pickaxe","minecraft:diamond_axe","minecraft:stick","minecraft:bowl","minecraft:mushroom_stew","minecraft:golden_sword","minecraft:golden_shovel","minecraft:golden_pickaxe","minecraft:golden_axe","minecraft:string","minecraft:feather","minecraft:gunpowder","minecraft:wooden_hoe","minecraft:stone_hoe","minecraft:iron_hoe","minecraft:diamond_hoe","minecraft:golden_hoe","minecraft:wheat_seeds","minecraft:wheat","minecraft:bread","minecraft:leather_helmet","minecraft:leather_chestplate","minecraft:leather_leggings","minecraft:leather_boots","minecraft:chainmail_helmet","minecraft:chainmail_chestplate","minecraft:chainmail_leggings","minecraft:chainmail_boots","minecraft:iron_helmet","minecraft:iron_chestplate","minecraft:iron_leggings","minecraft:iron_boots","minecraft:diamond_helmet","minecraft:diamond_chestplate","minecraft:diamond_leggings","minecraft:diamond_boots","minecraft:golden_helmet","minecraft:golden_chestplate","minecraft:golden_leggings","minecraft:golden_boots","minecraft:flint","minecraft:porkchop","minecraft:cooked_porkchop","minecraft:painting","minecraft:golden_apple","minecraft:enchanted_golden_apple","minecraft:sign","minecraft:bucket","minecraft:water_bucket","minecraft:lava_bucket","minecraft:minecart","minecraft:saddle","minecraft:redstone","minecraft:snowball","minecraft:oak_boat","minecraft:leather","minecraft:milk_bucket","minecraft:brick","minecraft:clay_ball","minecraft:paper","minecraft:book","minecraft:slime_ball","minecraft:chest_minecart","minecraft:furnace_minecart","minecraft:egg","minecraft:compass","minecraft:fishing_rod","minecraft:clock","minecraft:glowstone_dust","minecraft:cod","minecraft:salmon","minecraft:clownfish","minecraft:pufferfish","minecraft:cooked_cod","minecraft:cooked_salmon","minecraft:ink_sac","minecraft:rose_red","minecraft:cactus_green","minecraft:cocoa_beans","minecraft:lapis_lazuli","minecraft:purple_dye","minecraft:cyan_dye","minecraft:light_gray_dye","minecraft:gray_dye","minecraft:pink_dye","minecraft:lime_dye","minecraft:dandelion_yellow","minecraft:light_blue_dye","minecraft:magenta_dye","minecraft:orange_dye","minecraft:bone_meal","minecraft:bone","minecraft:sugar","minecraft:cookie","minecraft:filled_map","minecraft:shears","minecraft:melon","minecraft:pumpkin_seeds","minecraft:melon_seeds","minecraft:beef","minecraft:cooked_beef","minecraft:chicken","minecraft:cooked_chicken","minecraft:rotten_flesh","minecraft:ender_pearl","minecraft:blaze_rod","minecraft:ghast_tear","minecraft:gold_nugget","minecraft:nether_wart","minecraft:potion","minecraft:glass_bottle","minecraft:spider_eye","minecraft:fermented_spider_eye","minecraft:blaze_powder","minecraft:magma_cream","minecraft:ender_eye","minecraft:speckled_melon","minecraft:bat_spawn_egg","minecraft:blaze_spawn_egg","minecraft:cave_spider_spawn_egg","minecraft:chicken_spawn_egg","minecraft:cow_spawn_egg","minecraft:creeper_spawn_egg","minecraft:donkey_spawn_egg","minecraft:elder_guardian_spawn_egg","minecraft:enderman_spawn_egg","minecraft:endermite_spawn_egg","minecraft:evocation_illager_spawn_egg","minecraft:ghast_spawn_egg","minecraft:guardian_spawn_egg","minecraft:horse_spawn_egg","minecraft:husk_spawn_egg","minecraft:llama_spawn_egg","minecraft:magma_cube_spawn_egg","minecraft:mooshroom_spawn_egg","minecraft:mule_spawn_egg","minecraft:ocelot_spawn_egg","minecraft:parrot_spawn_egg","minecraft:pig_spawn_egg","minecraft:polar_bear_spawn_egg","minecraft:rabbit_spawn_egg","minecraft:sheep_spawn_egg","minecraft:shulker_spawn_egg","minecraft:silverfish_spawn_egg","minecraft:skeleton_spawn_egg","minecraft:skeleton_horse_spawn_egg","minecraft:slime_spawn_egg","minecraft:spider_spawn_egg","minecraft:squid_spawn_egg","minecraft:stray_spawn_egg","minecraft:vex_spawn_egg","minecraft:villager_spawn_egg","minecraft:vindication_illager_spawn_egg","minecraft:witch_spawn_egg","minecraft:wither_skeleton_spawn_egg","minecraft:wolf_spawn_egg","minecraft:zombie_spawn_egg","minecraft:zombie_horse_spawn_egg","minecraft:zombie_pigman_spawn_egg","minecraft:zombie_villager_spawn_egg","minecraft:experience_bottle","minecraft:fire_charge","minecraft:writable_book","minecraft:written_book","minecraft:emerald","minecraft:item_frame","minecraft:carrot","minecraft:potato","minecraft:baked_potato","minecraft:poisonous_potato","minecraft:map","minecraft:golden_carrot","minecraft:carrot_on_a_stick","minecraft:nether_star","minecraft:pumpkin_pie","minecraft:firework_rocket","minecraft:firework_star","minecraft:enchanted_book","minecraft:nether_brick","minecraft:quartz","minecraft:tnt_minecart","minecraft:hopper_minecart","minecraft:prismarine_shard","minecraft:prismarine_crystals","minecraft:rabbit","minecraft:cooked_rabbit","minecraft:rabbit_stew","minecraft:rabbit_foot","minecraft:rabbit_hide","minecraft:armor_stand","minecraft:iron_horse_armor","minecraft:golden_horse_armor","minecraft:diamond_horse_armor","minecraft:lead","minecraft:name_tag","minecraft:command_block_minecart","minecraft:mutton","minecraft:cooked_mutton","minecraft:white_banner","minecraft:orange_banner","minecraft:magenta_banner","minecraft:light_blue_banner","minecraft:yellow_banner","minecraft:lime_banner","minecraft:pink_banner","minecraft:gray_banner","minecraft:light_gray_banner","minecraft:cyan_banner","minecraft:purple_banner","minecraft:blue_banner","minecraft:brown_banner","minecraft:green_banner","minecraft:red_banner","minecraft:black_banner","minecraft:end_crystal","minecraft:chorus_fruit","minecraft:chorus_fruit_popped","minecraft:beetroot","minecraft:beetroot_seeds","minecraft:beetroot_soup","minecraft:dragon_breath","minecraft:splash_potion","minecraft:spectral_arrow","minecraft:tipped_arrow","minecraft:lingering_potion","minecraft:shield","minecraft:elytra","minecraft:spruce_boat","minecraft:birch_boat","minecraft:jungle_boat","minecraft:acacia_boat","minecraft:dark_oak_boat","minecraft:totem_of_undying","minecraft:shulker_shell","minecraft:iron_nugget","minecraft:knowledge_book","minecraft:debug_stick","minecraft:music_disc_13","minecraft:music_disc_cat","minecraft:music_disc_blocks","minecraft:music_disc_chirp","minecraft:music_disc_far","minecraft:music_disc_mall","minecraft:music_disc_mellohi","minecraft:music_disc_stal","minecraft:music_disc_strad","minecraft:music_disc_ward","minecraft:music_disc_11","minecraft:music_disc_wait"]))};
  const peg$c549 = function() {result(null, null, ["@p", "@a", "@r", "@s"])};
  const peg$c550 = /^[^ ]/;
  const peg$c551 = peg$classExpectation([" "], true, false);
  const peg$c552 = " ";
  const peg$c553 = peg$literalExpectation(" ", false);
  const peg$c554 = function(value) { return value; };
  const peg$c555 = "{";
  const peg$c556 = peg$literalExpectation("{", false);
  const peg$c557 = "}";
  const peg$c558 = peg$literalExpectation("}", false);
  const peg$c559 = function() { return false; };
  const peg$c560 = function() { return true;  };
  const peg$c561 = function(head, m) { return m; };
  const peg$c562 = function(head, tail) {
          var result = {};

          [head].concat(tail).forEach(function(element) {
            result[element.name] = element.value;
          });

          return result;
        };
  const peg$c563 = function(members) { return members !== null ? members: {}; };
  const peg$c564 = function(name, value) {
      return { name: name, value: value };
    };
  const peg$c565 = function(head, v) { return v; };
  const peg$c566 = function(head, tail) { return [head].concat(tail); };
  const peg$c567 = function(values) { return values !== null ? values : []; };
  const peg$c568 = /^[bdflsBDFLS]/;
  const peg$c569 = peg$classExpectation(["b", "d", "f", "l", "s", "B", "D", "F", "L", "S"], false, false);
  const peg$c570 = function() { return parseFloat(text()); };
  const peg$c571 = "..";
  const peg$c572 = peg$literalExpectation("..", false);
  const peg$c573 = ".";
  const peg$c574 = peg$literalExpectation(".", false);
  const peg$c575 = /^[1-9]/;
  const peg$c576 = peg$classExpectation([["1", "9"]], false, false);
  const peg$c577 = /^[eE]/;
  const peg$c578 = peg$classExpectation(["e", "E"], false, false);
  const peg$c579 = "-";
  const peg$c580 = peg$literalExpectation("-", false);
  const peg$c581 = "+";
  const peg$c582 = peg$literalExpectation("+", false);
  const peg$c583 = "0";
  const peg$c584 = peg$literalExpectation("0", false);
  const peg$c585 = function(chars) { return chars.join(""); };
  const peg$c586 = "\"";
  const peg$c587 = peg$literalExpectation("\"", false);
  const peg$c588 = "\\";
  const peg$c589 = peg$literalExpectation("\\", false);
  const peg$c590 = "/";
  const peg$c591 = peg$literalExpectation("/", false);
  const peg$c592 = "b";
  const peg$c593 = peg$literalExpectation("b", false);
  const peg$c594 = function() { return "\b"; };
  const peg$c595 = "f";
  const peg$c596 = peg$literalExpectation("f", false);
  const peg$c597 = function() { return "\f"; };
  const peg$c598 = "n";
  const peg$c599 = peg$literalExpectation("n", false);
  const peg$c600 = function() { return "\n"; };
  const peg$c601 = "r";
  const peg$c602 = peg$literalExpectation("r", false);
  const peg$c603 = function() { return "\r"; };
  const peg$c604 = "t";
  const peg$c605 = peg$literalExpectation("t", false);
  const peg$c606 = function() { return "\t"; };
  const peg$c607 = "u";
  const peg$c608 = peg$literalExpectation("u", false);
  const peg$c609 = function(digits) {
            return String.fromCharCode(parseInt(digits, 16));
          };
  const peg$c610 = function(sequence) { return sequence; };
  const peg$c611 = /^[^\0-\x1F"\\]/;
  const peg$c612 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false);
  const peg$c613 = /^[0-9]/;
  const peg$c614 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c615 = /^[0-9a-f]/i;
  const peg$c616 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: any[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache = {};

  let peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location1?) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean) {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase: boolean) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message, location1) {
    return new SyntaxError(message, "", "", location1);
  }

  function peg$buildStructuredError(expected1, found, location1) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart() {
    let s0, s1;

    const key = peg$currPos * 127 + 0;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsecommand();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecommand() {
    let s0, s1;

    const key = peg$currPos * 127 + 1;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseadvancement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseclear();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclone();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedata();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedatapack();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedefaultgamemode();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedifficulty();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseeffect();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseexecute();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseexperience();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsefill();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsefunction();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsegamemode();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsegamerule();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsegive();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsehelp();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsekill();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parselocate();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseme();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsemsg();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseparticle();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseplaysound();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parserecipe();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsereplaceitem();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsesay();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsescoreboard();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsesetblock();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsesetworldspawn();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsespawnpoint();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsespreadplayers();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsestopsound();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsesummon();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsetag();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseteam();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsetellraw();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsetime();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsetitle();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsetrigger();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseweather();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseworldborder();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parse__();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      peg$savedPos = s0;
                                                                                      s1 = peg$c1();
                                                                                    }
                                                                                    s0 = s1;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseadvancement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 2;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c4) {
          s4 = peg$c4;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s4 = peg$c6;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseplayers();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s10 = peg$c8;
                  peg$currPos += 4;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c10();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_advancement();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c11();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c12) {
                    s10 = peg$c12;
                    peg$currPos += 4;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                  }
                  if (s10 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c14) {
                      s10 = peg$c14;
                      peg$currPos += 7;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    if (s10 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c16) {
                        s10 = peg$c16;
                        peg$currPos += 5;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
                      }
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_advancement();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c18();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c19();
                    }
                    s9 = s10;
                  }
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_players();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c20();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c21();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseclear() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 3;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseitem();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c24();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_item();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c25();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c26();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseclone() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    const key = peg$currPos * 127 + 4;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c29) {
                      s13 = peg$c29;
                      peg$currPos += 8;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parseblock();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$parse__();
                            if (s18 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c31();
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse_block();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c32();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      if (input.substr(peg$currPos, 6) === peg$c33) {
                        s13 = peg$c33;
                        peg$currPos += 6;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                      }
                      if (s13 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c35) {
                          s13 = peg$c35;
                          peg$currPos += 7;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c36); }
                        }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c31();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c37();
                        }
                        s12 = s13;
                      }
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c38();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c39();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c40();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedata() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 5;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c43) {
          s4 = peg$c43;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s7 = peg$c45;
              peg$currPos += 5;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c47();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_nbt_path();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c48();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c49();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                s7 = peg$c50;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentity();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c47();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_nbt_path();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c48();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseentity();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c52();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c53();
                }
                s6 = s7;
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c54) {
            s4 = peg$c54;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c56) {
              s4 = peg$c56;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s7 = peg$c45;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseblock_pos();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_nbt();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c58();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_block_pos();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c59();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c50) {
                  s7 = peg$c50;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentity();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_nbt();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c58();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entity();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c60();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c53();
                  }
                  s6 = s7;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c61();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedatapack() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    const key = peg$currPos * 127 + 6;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c64) {
          s4 = peg$c64;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c66();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c67) {
            s4 = peg$c67;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse___();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c69) {
                    s10 = peg$c69;
                    peg$currPos += 5;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c70); }
                  }
                  if (s10 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c71) {
                      s10 = peg$c71;
                      peg$currPos += 6;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_string();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c73();
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c74();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_string();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c66();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c75) {
              s4 = peg$c75;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c77(s6);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c78();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedefaultgamemode() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 7;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c81();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedifficulty() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 8;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c84();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseeffect() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    const key = peg$currPos * 127 + 9;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseentities();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c87();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_entities();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c88();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c89) {
            s4 = peg$c89;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse___();
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$parse_bool();
                              if (s18 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c91();
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c92();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c93();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c94();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c88();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c95();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexecute() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 10;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesub();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c98();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesub() {
    let s0;

    const key = peg$currPos * 127 + 11;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsealign();
    if (s0 === peg$FAILED) {
      s0 = peg$parseas();
      if (s0 === peg$FAILED) {
        s0 = peg$parseat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseif();
          if (s0 === peg$FAILED) {
            s0 = peg$parseoffset();
            if (s0 === peg$FAILED) {
              s0 = peg$parserun();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestore();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunless();
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsealign() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 12;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c101();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseas() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 13;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c104();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseat() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 14;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c105) {
      s1 = peg$c105;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c104();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseif() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    const key = peg$currPos * 127 + 15;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsesub();
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c98();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c109();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c110();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c111) {
            s4 = peg$c111;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseblock_pos();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseblock_pos();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parseblock_pos();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          if (input.substr(peg$currPos, 3) === peg$c113) {
                            s16 = peg$c113;
                            peg$currPos += 3;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c114); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c33) {
                              s16 = peg$c33;
                              peg$currPos += 6;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                          }
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$parsesub();
                              if (s18 === peg$FAILED) {
                                s18 = peg$currPos;
                                s19 = peg$parse__();
                                if (s19 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c98();
                                }
                                s18 = s19;
                              }
                              if (s18 !== peg$FAILED) {
                                s16 = [s16, s17, s18];
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c115();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_block_pos();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c116();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_block_pos();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c117();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_block_pos();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c118();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c50) {
              s4 = peg$c50;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseentities();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsesub();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c98();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse_entities();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c119();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c120) {
                s4 = peg$c120;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseentity();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse___();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse___();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parseentity();
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$parse___();
                                  if (s19 !== peg$FAILED) {
                                    s20 = peg$parse_();
                                    if (s20 !== peg$FAILED) {
                                      s21 = peg$parsesub();
                                      if (s21 === peg$FAILED) {
                                        s21 = peg$currPos;
                                        s22 = peg$parse__();
                                        if (s22 !== peg$FAILED) {
                                          peg$savedPos = s21;
                                          s22 = peg$c98();
                                        }
                                        s21 = s22;
                                      }
                                      if (s21 !== peg$FAILED) {
                                        s19 = [s19, s20, s21];
                                        s18 = s19;
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                  if (s18 === peg$FAILED) {
                                    s18 = peg$currPos;
                                    s19 = peg$parse__();
                                    if (s19 !== peg$FAILED) {
                                      peg$savedPos = s18;
                                      s19 = peg$c122();
                                    }
                                    s18 = s19;
                                  }
                                  if (s18 !== peg$FAILED) {
                                    s16 = [s16, s17, s18];
                                    s15 = s16;
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                              if (s15 === peg$FAILED) {
                                s15 = peg$currPos;
                                s16 = peg$parse_entity();
                                if (s16 !== peg$FAILED) {
                                  peg$savedPos = s15;
                                  s16 = peg$c123();
                                }
                                s15 = s16;
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parse__();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s12;
                              s13 = peg$c124();
                            }
                            s12 = s13;
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c125();
                        }
                        s9 = s10;
                      }
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse_entity();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c126();
                    }
                    s6 = s7;
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c127();
                }
                s3 = s4;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseoffset() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 16;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c128) {
      s1 = peg$c128;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsevec3();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesub();
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c98();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_vec3();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c130();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parserun() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 17;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c131) {
      s1 = peg$c131;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecommand();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestore() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    const key = peg$currPos * 127 + 18;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c133) {
      s1 = peg$c133;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c135) {
          s4 = peg$c135;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c137) {
            s4 = peg$c137;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c138); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s7 = peg$c45;
              peg$currPos += 5;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock_pos();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        if (input.substr(peg$currPos, 4) === peg$c139) {
                          s16 = peg$c139;
                          peg$currPos += 4;
                        } else {
                          s16 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s16 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c141) {
                            s16 = peg$c141;
                            peg$currPos += 6;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c142); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c143) {
                              s16 = peg$c143;
                              peg$currPos += 5;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c144); }
                            }
                            if (s16 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c145) {
                                s16 = peg$c145;
                                peg$currPos += 3;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c146); }
                              }
                              if (s16 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c147) {
                                  s16 = peg$c147;
                                  peg$currPos += 4;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                }
                                if (s16 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c149) {
                                    s16 = peg$c149;
                                    peg$currPos += 5;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c150); }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            s19 = peg$parse___();
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parsesub();
                                if (s21 === peg$FAILED) {
                                  s21 = peg$currPos;
                                  s22 = peg$parse__();
                                  if (s22 !== peg$FAILED) {
                                    peg$savedPos = s21;
                                    s22 = peg$c98();
                                  }
                                  s21 = s22;
                                }
                                if (s21 !== peg$FAILED) {
                                  s19 = [s19, s20, s21];
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c151();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c152();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_nbt_path();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c153();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block_pos();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c154();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                s7 = peg$c50;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentity();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          if (input.substr(peg$currPos, 4) === peg$c139) {
                            s16 = peg$c139;
                            peg$currPos += 4;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c141) {
                              s16 = peg$c141;
                              peg$currPos += 6;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c142); }
                            }
                            if (s16 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c143) {
                                s16 = peg$c143;
                                peg$currPos += 5;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c144); }
                              }
                              if (s16 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c145) {
                                  s16 = peg$c145;
                                  peg$currPos += 3;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                }
                                if (s16 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c147) {
                                    s16 = peg$c147;
                                    peg$currPos += 4;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                  }
                                  if (s16 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c149) {
                                      s16 = peg$c149;
                                      peg$currPos += 5;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c150); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse___();
                              if (s19 !== peg$FAILED) {
                                s20 = peg$parse_();
                                if (s20 !== peg$FAILED) {
                                  s21 = peg$parsesub();
                                  if (s21 === peg$FAILED) {
                                    s21 = peg$currPos;
                                    s22 = peg$parse__();
                                    if (s22 !== peg$FAILED) {
                                      peg$savedPos = s21;
                                      s22 = peg$c98();
                                    }
                                    s21 = s22;
                                  }
                                  if (s21 !== peg$FAILED) {
                                    s19 = [s19, s20, s21];
                                    s18 = s19;
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                              if (s18 === peg$FAILED) {
                                s18 = peg$currPos;
                                s19 = peg$parse__();
                                if (s19 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c151();
                                }
                                s18 = s19;
                              }
                              if (s18 !== peg$FAILED) {
                                s16 = [s16, s17, s18];
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c152();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_nbt_path();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c153();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_entity();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c155();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c120) {
                  s7 = peg$c120;
                  peg$currPos += 5;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentities();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse___();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsesub();
                            if (s15 === peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parse__();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s15;
                                s16 = peg$c98();
                              }
                              s15 = s16;
                            }
                            if (s15 !== peg$FAILED) {
                              s13 = [s13, s14, s15];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c156();
                          }
                          s12 = s13;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entities();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c157();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c158();
                  }
                  s6 = s7;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c159();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseunless() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    const key = peg$currPos * 127 + 19;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c160) {
      s1 = peg$c160;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsesub();
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c98();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c109();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c110();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c111) {
            s4 = peg$c111;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseblock_pos();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseblock_pos();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parseblock_pos();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$currPos;
                          if (input.substr(peg$currPos, 3) === peg$c113) {
                            s16 = peg$c113;
                            peg$currPos += 3;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c114); }
                          }
                          if (s16 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c33) {
                              s16 = peg$c33;
                              peg$currPos += 6;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                          }
                          if (s16 !== peg$FAILED) {
                            s17 = peg$parse_();
                            if (s17 !== peg$FAILED) {
                              s18 = peg$parsesub();
                              if (s18 === peg$FAILED) {
                                s18 = peg$currPos;
                                s19 = peg$parse__();
                                if (s19 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c98();
                                }
                                s18 = s19;
                              }
                              if (s18 !== peg$FAILED) {
                                s16 = [s16, s17, s18];
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                          if (s15 === peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = peg$parse__();
                            if (s16 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s16 = peg$c115();
                            }
                            s15 = s16;
                          }
                          if (s15 !== peg$FAILED) {
                            s13 = [s13, s14, s15];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_block_pos();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c116();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_block_pos();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c117();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_block_pos();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c118();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c50) {
              s4 = peg$c50;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseentities();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsesub();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c98();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse_entities();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c119();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c120) {
                s4 = peg$c120;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseentity();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse___();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parse___();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parseentity();
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$parsesub();
                                  if (s18 === peg$FAILED) {
                                    s18 = peg$currPos;
                                    s19 = peg$parse__();
                                    if (s19 !== peg$FAILED) {
                                      peg$savedPos = s18;
                                      s19 = peg$c122();
                                    }
                                    s18 = s19;
                                  }
                                  if (s18 !== peg$FAILED) {
                                    s16 = [s16, s17, s18];
                                    s15 = s16;
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                              if (s15 === peg$FAILED) {
                                s15 = peg$currPos;
                                s16 = peg$parse_entity();
                                if (s16 !== peg$FAILED) {
                                  peg$savedPos = s15;
                                  s16 = peg$c123();
                                }
                                s15 = s16;
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parse__();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s12;
                              s13 = peg$c124();
                            }
                            s12 = s13;
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c125();
                        }
                        s9 = s10;
                      }
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse_entity();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c126();
                    }
                    s6 = s7;
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c127();
                }
                s3 = s4;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexperience() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    const key = peg$currPos * 127 + 20;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c162) {
      s1 = peg$c162;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c163); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c166) {
          s4 = peg$c166;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c168) {
            s4 = peg$c168;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseplayers();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse__();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c170();
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c171();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_players();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c172();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c173) {
            s4 = peg$c173;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c174); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseplayers();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c170();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_players();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c175();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c176();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefill() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 21;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c177) {
      s1 = peg$c177;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseblock();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c35) {
                      s13 = peg$c35;
                      peg$currPos += 7;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_block();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c179();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c180();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_block();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c181();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c182();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c183();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefunction() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 22;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c184) {
      s1 = peg$c184;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c185); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_function();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c186();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsegamemode() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 23;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c187) {
      s1 = peg$c187;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c189) {
          s4 = peg$c189;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c191) {
            s4 = peg$c191;
            peg$currPos += 8;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c193) {
              s4 = peg$c193;
              peg$currPos += 9;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c195) {
                s4 = peg$c195;
                peg$currPos += 8;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c196); }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_player();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c197();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c81();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsegamerule() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 24;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c198) {
      s1 = peg$c198;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c200) {
          s4 = peg$c200;
          peg$currPos += 20;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c201); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 18) === peg$c202) {
            s4 = peg$c202;
            peg$currPos += 18;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c203); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 26) === peg$c204) {
              s4 = peg$c204;
              peg$currPos += 26;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c205); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c206) {
                s4 = peg$c206;
                peg$currPos += 15;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c207); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 13) === peg$c208) {
                  s4 = peg$c208;
                  peg$currPos += 13;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c209); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10) === peg$c210) {
                    s4 = peg$c210;
                    peg$currPos += 10;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c211); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 17) === peg$c212) {
                      s4 = peg$c212;
                      peg$currPos += 17;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c213); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9) === peg$c214) {
                        s4 = peg$c214;
                        peg$currPos += 9;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c215); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 13) === peg$c216) {
                          s4 = peg$c216;
                          peg$currPos += 13;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c217); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 11) === peg$c218) {
                            s4 = peg$c218;
                            peg$currPos += 11;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c219); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 14) === peg$c220) {
                              s4 = peg$c220;
                              peg$currPos += 14;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c221); }
                            }
                            if (s4 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13) === peg$c222) {
                                s4 = peg$c222;
                                peg$currPos += 13;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c223); }
                              }
                              if (s4 === peg$FAILED) {
                                if (input.substr(peg$currPos, 16) === peg$c224) {
                                  s4 = peg$c224;
                                  peg$currPos += 16;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                }
                                if (s4 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 11) === peg$c226) {
                                    s4 = peg$c226;
                                    peg$currPos += 11;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                  }
                                  if (s4 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 19) === peg$c228) {
                                      s4 = peg$c228;
                                      peg$currPos += 19;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                    }
                                    if (s4 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 16) === peg$c230) {
                                        s4 = peg$c230;
                                        peg$currPos += 16;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c231); }
                                      }
                                      if (s4 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 19) === peg$c232) {
                                          s4 = peg$c232;
                                          peg$currPos += 19;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 17) === peg$c234) {
                                            s4 = peg$c234;
                                            peg$currPos += 17;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c235); }
                                          }
                                          if (s4 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 24) === peg$c236) {
                                              s4 = peg$c236;
                                              peg$currPos += 24;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c237); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_bool();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c238();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 21) === peg$c239) {
            s4 = peg$c239;
            peg$currPos += 21;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c240); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 17) === peg$c241) {
              s4 = peg$c241;
              peg$currPos += 17;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c243) {
                s4 = peg$c243;
                peg$currPos += 15;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c244); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c245) {
                  s4 = peg$c245;
                  peg$currPos += 11;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c246); }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c247();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c248();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsegive() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 25;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseitem();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c249();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_item();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c250();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c251();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsehelp() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 26;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c252) {
      s1 = peg$c252;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c253); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c255();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsekill() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 27;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c256) {
      s1 = peg$c256;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c257); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_entities();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c258();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselocate() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 28;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c259) {
      s1 = peg$c259;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c260); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c261();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseme() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 29;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c262) {
      s1 = peg$c262;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c263); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c264();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsemsg() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 30;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c265) {
      s1 = peg$c265;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c266); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c267) {
        s1 = peg$c267;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c268); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 119) {
          s1 = peg$c269;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_message();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c271();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c272();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseparticle() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    const key = peg$currPos * 127 + 31;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c273) {
      s1 = peg$c273;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c274); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsevec3();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parsevec3();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse___();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c275) {
                              s19 = peg$c275;
                              peg$currPos += 5;
                            } else {
                              s19 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c276); }
                            }
                            if (s19 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c277) {
                                s19 = peg$c277;
                                peg$currPos += 6;
                              } else {
                                s19 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c278); }
                              }
                            }
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parse_players();
                                if (s21 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c279();
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c280();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c281();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c282();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_vec3();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c283();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_vec3();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c284();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c285();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseplaysound() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    const key = peg$currPos * 127 + 32;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c286) {
      s1 = peg$c286;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c287); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c288) {
              s7 = peg$c288;
              peg$currPos += 7;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c289); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s7 = peg$c45;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c290) {
                  s7 = peg$c290;
                  peg$currPos += 7;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c291); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c292) {
                    s7 = peg$c292;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c293); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c294) {
                      s7 = peg$c294;
                      peg$currPos += 5;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c295); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c296) {
                        s7 = peg$c296;
                        peg$currPos += 7;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c297); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c298) {
                          s7 = peg$c298;
                          peg$currPos += 6;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c299); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c300) {
                            s7 = peg$c300;
                            peg$currPos += 6;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c301); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c302) {
                              s7 = peg$c302;
                              peg$currPos += 5;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c303); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c304) {
                                s7 = peg$c304;
                                peg$currPos += 7;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c305); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parseplayers();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parsevec3();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse___();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          if (s17 !== peg$FAILED) {
                            s18 = peg$currPos;
                            s19 = peg$parse___();
                            if (s19 !== peg$FAILED) {
                              s20 = peg$parse_();
                              if (s20 !== peg$FAILED) {
                                s21 = peg$parse__();
                                if (s21 !== peg$FAILED) {
                                  peg$savedPos = s18;
                                  s19 = peg$c306();
                                  s18 = s19;
                                } else {
                                  peg$currPos = s18;
                                  s18 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s18;
                                s18 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s18;
                              s18 = peg$FAILED;
                            }
                            if (s18 === peg$FAILED) {
                              s18 = peg$currPos;
                              s19 = peg$parse__();
                              if (s19 !== peg$FAILED) {
                                peg$savedPos = s18;
                                s19 = peg$c307();
                              }
                              s18 = s19;
                            }
                            if (s18 !== peg$FAILED) {
                              s16 = [s16, s17, s18];
                              s15 = s16;
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = peg$currPos;
                          s16 = peg$parse__();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s15;
                            s16 = peg$c308();
                          }
                          s15 = s16;
                        }
                        if (s15 !== peg$FAILED) {
                          s13 = [s13, s14, s15];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_vec3();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c309();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_players();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c310();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c311();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c312();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parserecipe() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 33;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c313) {
      s1 = peg$c313;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c314); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c89) {
          s4 = peg$c89;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c315) {
            s4 = peg$c315;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c316); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseplayers();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c317();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_players();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c318();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c319();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsereplaceitem() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 34;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c320) {
      s1 = peg$c320;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock_pos();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parseitem();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse__();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c249();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_item();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c250();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c322();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block_pos();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c323();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c50) {
            s4 = peg$c50;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseentities();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parseitem();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c249();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_item();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c250();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c322();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse_entities();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c324();
                }
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c53();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesay() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 35;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c325) {
      s1 = peg$c325;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c326); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_message();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c271();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsescoreboard() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    const key = peg$currPos * 127 + 36;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c327) {
      s1 = peg$c327;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c328); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c329) {
          s4 = peg$c329;
          peg$currPos += 10;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c330); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c166) {
              s7 = peg$c166;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c167); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = [];
                        if (input.length > peg$currPos) {
                          s16 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s16 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c254); }
                        }
                        while (s16 !== peg$FAILED) {
                          s15.push(s16);
                          if (input.length > peg$currPos) {
                            s16 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s16 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c254); }
                          }
                        }
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c331();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c332();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c333();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s7 = peg$c56;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c334();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 10) === peg$c335) {
                  s7 = peg$c335;
                  peg$currPos += 10;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c336); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse___();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse__();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c337();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c338();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c339();
                  }
                  s6 = s7;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c340) {
            s4 = peg$c340;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c341); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c166) {
                s7 = peg$c166;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c167); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c56) {
                  s7 = peg$c56;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c168) {
                    s7 = peg$c168;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c169); }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parseentities();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c342();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c343();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse_entities();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c344();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c67) {
                  s7 = peg$c67;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseentities();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse__();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c334();
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parse_entities();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$c345();
                      }
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c43) {
                    s7 = peg$c43;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseentity();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse__();
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s9;
                            s10 = peg$c334();
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parse_entity();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c346();
                        }
                        s9 = s10;
                      }
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c75) {
                      s7 = peg$c75;
                      peg$currPos += 4;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c76); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parseentity();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s9;
                          s10 = peg$c347();
                        }
                        s9 = s10;
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parse_entity();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s9;
                            s10 = peg$c347();
                          }
                          s9 = s10;
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = peg$currPos;
                      if (input.substr(peg$currPos, 9) === peg$c348) {
                        s7 = peg$c348;
                        peg$currPos += 9;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c349); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parseentities();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$currPos;
                              s13 = peg$parse___();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parse_();
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$currPos;
                                  s16 = peg$parse___();
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parse_();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$currPos;
                                      s19 = peg$parseentities();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parse_();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parse__();
                                          if (s21 !== peg$FAILED) {
                                            peg$savedPos = s18;
                                            s19 = peg$c350();
                                            s18 = s19;
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                      if (s18 === peg$FAILED) {
                                        s18 = peg$currPos;
                                        s19 = peg$parse_entities();
                                        if (s19 !== peg$FAILED) {
                                          peg$savedPos = s18;
                                          s19 = peg$c351();
                                        }
                                        s18 = s19;
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s16 = [s16, s17, s18];
                                        s15 = s16;
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    s16 = peg$parse__();
                                    if (s16 !== peg$FAILED) {
                                      peg$savedPos = s15;
                                      s16 = peg$c352();
                                    }
                                    s15 = s16;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s13 = [s13, s14, s15];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = peg$currPos;
                                s13 = peg$parse__();
                                if (s13 !== peg$FAILED) {
                                  peg$savedPos = s12;
                                  s13 = peg$c353();
                                }
                                s12 = s13;
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            s10 = peg$parse_entities();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c354();
                            }
                            s9 = s10;
                          }
                          if (s9 !== peg$FAILED) {
                            s7 = [s7, s8, s9];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c355) {
                          s7 = peg$c355;
                          peg$currPos += 5;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c356); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$currPos;
                            s10 = peg$parseentities();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse__();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s9;
                                  s10 = peg$c337();
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = peg$currPos;
                              s10 = peg$parse_entities();
                              if (s10 !== peg$FAILED) {
                                peg$savedPos = s9;
                                s10 = peg$c357();
                              }
                              s9 = s10;
                            }
                            if (s9 !== peg$FAILED) {
                              s7 = [s7, s8, s9];
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                        if (s6 === peg$FAILED) {
                          s6 = peg$currPos;
                          s7 = peg$parse__();
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s6;
                            s7 = peg$c358();
                          }
                          s6 = s7;
                        }
                      }
                    }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c359();
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesetblock() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 37;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c360) {
      s1 = peg$c360;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c361); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblock_pos();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseblock();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c362();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_block();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c363();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_block_pos();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c364();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesetworldspawn() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 38;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c365) {
      s1 = peg$c365;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c366); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_block_pos();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c367();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsespawnpoint() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 39;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c368) {
      s1 = peg$c368;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c369); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_block_pos();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c367();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c370();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsespreadplayers() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 40;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c371) {
      s1 = peg$c371;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c372); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsevec2();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse___();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$currPos;
                    s13 = peg$parse___();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_entities();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c258();
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_bool();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s13 = peg$c373();
                      }
                      s12 = s13;
                    }
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c374();
                  }
                  s9 = s10;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c375();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_vec2();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c376();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestopsound() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 41;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c377) {
      s1 = peg$c377;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c378); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
              s7 = peg$c379;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c380); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c288) {
                s7 = peg$c288;
                peg$currPos += 7;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c289); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c45) {
                  s7 = peg$c45;
                  peg$currPos += 5;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c290) {
                    s7 = peg$c290;
                    peg$currPos += 7;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c291); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c292) {
                      s7 = peg$c292;
                      peg$currPos += 6;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c293); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c294) {
                        s7 = peg$c294;
                        peg$currPos += 5;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c295); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c296) {
                          s7 = peg$c296;
                          peg$currPos += 7;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c297); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c298) {
                            s7 = peg$c298;
                            peg$currPos += 6;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c299); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c300) {
                              s7 = peg$c300;
                              peg$currPos += 6;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c301); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c302) {
                                s7 = peg$c302;
                                peg$currPos += 5;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c303); }
                              }
                              if (s7 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c304) {
                                  s7 = peg$c304;
                                  peg$currPos += 7;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c305); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c381();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c382();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c383();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesummon() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 42;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c384) {
      s1 = peg$c384;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c385); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsevec3();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_nbt();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c58();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse_vec3();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c386();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c387();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetag() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 43;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c388) {
      s1 = peg$c388;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c389); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c166) {
              s7 = peg$c166;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c167); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s7 = peg$c56;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c390();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c391();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c392();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseteam() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    const key = peg$currPos * 127 + 44;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c393) {
      s1 = peg$c393;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c394); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c166) {
          s4 = peg$c166;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = [];
                if (input.length > peg$currPos) {
                  s10 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c254); }
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (input.length > peg$currPos) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c254); }
                  }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c331();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c395();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c396) {
            s4 = peg$c396;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c397); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c75) {
              s4 = peg$c75;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c56) {
                s4 = peg$c56;
                peg$currPos += 6;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c398();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c399) {
              s4 = peg$c399;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c400); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse___();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_entities();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c401();
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c402();
                  }
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c403) {
                s4 = peg$c403;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c404); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_entities();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c405();
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c406) {
                  s4 = peg$c406;
                  peg$currPos += 6;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c407); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse___();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.substr(peg$currPos, 13) === peg$c408) {
                          s10 = peg$c408;
                          peg$currPos += 13;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c409); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse__();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s9;
                              s10 = peg$c410();
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c411) {
                            s10 = peg$c411;
                            peg$currPos += 5;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c412); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                peg$savedPos = s9;
                                s10 = peg$c413();
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            if (input.substr(peg$currPos, 22) === peg$c414) {
                              s10 = peg$c414;
                              peg$currPos += 22;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c415); }
                            }
                            if (s10 === peg$FAILED) {
                              if (input.substr(peg$currPos, 17) === peg$c416) {
                                s10 = peg$c416;
                                peg$currPos += 17;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c417); }
                              }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse__();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s9;
                                  s10 = peg$c418();
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = peg$currPos;
                              if (input.substr(peg$currPos, 11) === peg$c419) {
                                s10 = peg$c419;
                                peg$currPos += 11;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c420); }
                              }
                              if (s10 === peg$FAILED) {
                                if (input.substr(peg$currPos, 21) === peg$c421) {
                                  s10 = peg$c421;
                                  peg$currPos += 21;
                                } else {
                                  s10 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c422); }
                                }
                              }
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parse_();
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parse_bool();
                                  if (s12 !== peg$FAILED) {
                                    peg$savedPos = s9;
                                    s10 = peg$c423();
                                    s9 = s10;
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                              if (s9 === peg$FAILED) {
                                s9 = peg$currPos;
                                s10 = peg$parse__();
                                if (s10 !== peg$FAILED) {
                                  peg$savedPos = s9;
                                  s10 = peg$c424();
                                }
                                s9 = s10;
                              }
                            }
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = peg$currPos;
                      s7 = peg$parse__();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c425();
                      }
                      s6 = s7;
                    }
                    if (s6 !== peg$FAILED) {
                      s4 = [s4, s5, s6];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parse__();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c426();
                  }
                  s3 = s4;
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetellraw() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 45;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c427) {
      s1 = peg$c427;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c428); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseentities();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_component();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c429();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_entities();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c430();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetime() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 46;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c431) {
      s1 = peg$c431;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c432); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c166) {
          s4 = peg$c166;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c433();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c173) {
            s4 = peg$c173;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c174); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c434();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c168) {
              s4 = peg$c168;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c169); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c435();
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c176();
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetitle() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    const key = peg$currPos * 127 + 47;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c436) {
      s1 = peg$c436;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c437); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplayers();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c438) {
              s7 = peg$c438;
              peg$currPos += 9;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c439); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c440) {
                s7 = peg$c440;
                peg$currPos += 8;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s7 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c436) {
                  s7 = peg$c436;
                  peg$currPos += 5;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c437); }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_component();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c442();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c443) {
                s7 = peg$c443;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c444); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse___();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse___();
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse__();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s13 = peg$c445();
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s13 = peg$c446();
                        }
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$c447();
                    }
                    s9 = s10;
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c448();
                }
                s6 = s7;
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_players();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c449();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetrigger() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 48;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c450) {
      s1 = peg$c450;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c451); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c166) {
              s7 = peg$c166;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c167); }
            }
            if (s7 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c168) {
                s7 = peg$c168;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c169); }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c247();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c452();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c453();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseweather() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 49;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c304) {
      s1 = peg$c304;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c305); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c454) {
            s4 = peg$c454;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c455); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c456) {
              s4 = peg$c456;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c457); }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c458();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c459();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseworldborder() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 50;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c460) {
      s1 = peg$c460;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c461); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c166) {
          s4 = peg$c166;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c168) {
            s4 = peg$c168;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse___();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c462();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c463();
              }
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c464) {
            s4 = peg$c464;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c465); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_vec2();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c466();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c467) {
              s4 = peg$c467;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c468); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c469) {
                  s7 = peg$c469;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c470); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c471();
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c472) {
                    s7 = peg$c472;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c473); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c474();
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c475();
                    }
                    s6 = s7;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c476) {
                s4 = peg$c476;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c477); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 8) === peg$c478) {
                    s7 = peg$c478;
                    peg$currPos += 8;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c479); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c474();
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c431) {
                      s7 = peg$c431;
                      peg$currPos += 4;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c432); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse__();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s6;
                          s7 = peg$c433();
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = peg$currPos;
                      s7 = peg$parse__();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c480();
                      }
                      s6 = s7;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c481();
                }
                s3 = s4;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestates() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 51;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c482;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c483); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestate();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c484;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c485); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsestate();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c484;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c485); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsestate();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c486;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c487); }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestate() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 52;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c488.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c489); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c490;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c488.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c489); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_advancement() {
    let s0, s1;

    const key = peg$currPos * 127 + 53;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c492();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseblock() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 54;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c488.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c489); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c493;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c488.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c489); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c488.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c489); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestates();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenbt_text();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_block() {
    let s0, s1;

    const key = peg$currPos * 127 + 55;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c495();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = [];
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseblock_pos() {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 127 + 56;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_block_pos() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 127 + 57;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse___();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse___();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebool() {
    let s0;

    const key = peg$currPos * 127 + 58;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5) === peg$c496) {
      s0 = peg$c496;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c497); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c498) {
        s0 = peg$c498;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c499); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_bool() {
    let s0, s1;

    const key = peg$currPos * 127 + 59;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c500();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_component() {
    let s0, s1;

    const key = peg$currPos * 127 + 60;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_arguments() {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 127 + 61;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c482;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c483); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselector_argument();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c484;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c485); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseselector_argument();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c484;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c485); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseselector_argument();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c486;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c487); }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_argument() {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 127 + 62;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c187) {
      s1 = peg$c187;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c501) {
        s1 = peg$c501;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c502); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 120) {
          s1 = peg$c503;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c504); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 121) {
            s1 = peg$c505;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c506); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 122) {
              s1 = peg$c507;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c508); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c509) {
                s1 = peg$c509;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c510); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c511) {
                  s1 = peg$c511;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c512); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c513) {
                    s1 = peg$c513;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c514); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c515) {
                      s1 = peg$c515;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c516); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c478) {
                        s1 = peg$c478;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c479); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c517) {
                          s1 = peg$c517;
                          peg$currPos += 10;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c518); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 10) === peg$c519) {
                            s1 = peg$c519;
                            peg$currPos += 10;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c520); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c521) {
                              s1 = peg$c521;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c522); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c490;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c523.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c524); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c523.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c524); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c388) {
        s1 = peg$c388;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c389); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c525) {
          s1 = peg$c525;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c526); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c490;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c491); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s3 = peg$c527;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c528); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c523.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c524); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c523.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c524); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c529) {
          s1 = peg$c529;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c530); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c531) {
            s1 = peg$c531;
            peg$currPos += 12;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c532); }
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c490;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c491); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseselector_text();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c533) {
            s1 = peg$c533;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c534); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 33) {
              s2 = peg$c527;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c528); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenbt_text();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c535) {
              s1 = peg$c535;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c536); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 33) {
                s2 = peg$c527;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c528); }
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsestring_();
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_selector_argument() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 63;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c537.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c538); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c537.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c538); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c490;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c537.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c538); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c537.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c538); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c539();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c540();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseentities() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 64;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselector_arguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parse___();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_entities() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 65;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c482;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseselector_argument();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c484;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c485); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseselector_argument();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c484;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_selector_argument();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c541;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c542); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c543.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c544); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c545();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c546();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseentity() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 66;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselector_arguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parse___();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_entity() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 67;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c482;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseselector_argument();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c484;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c485); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseselector_argument();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c484;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_selector_argument();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c541;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c542); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c543.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c544); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c545();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c546();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_function() {
    let s0, s1;

    const key = peg$currPos * 127 + 68;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c547(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseitem() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 69;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c488.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c489); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c493;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c488.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c489); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c488.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c489); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestates();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenbt_text();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_item() {
    let s0, s1;

    const key = peg$currPos * 127 + 70;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c548();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = [];
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_message() {
    let s0, s1;

    const key = peg$currPos * 127 + 71;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_nbt() {
    let s0, s1;

    const key = peg$currPos * 127 + 72;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_nbt_path() {
    let s0, s1;

    const key = peg$currPos * 127 + 73;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseplayer() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 74;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselector_arguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parse___();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_player() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 75;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c482;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseselector_argument();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c484;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c485); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseselector_argument();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c484;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_selector_argument();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c541;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c542); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c543.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c544); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c545();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c549();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseplayers() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 76;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselector_arguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parse___();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_players() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 77;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c541;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c542); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c543.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c544); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c482;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseselector_argument();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c484;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c485); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseselector_argument();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c484;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_selector_argument();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c541;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c542); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c543.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c544); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c545();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c549();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_rotation() {
    let s0, s1;

    const key = peg$currPos * 127 + 78;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_string() {
    let s0, s1;

    const key = peg$currPos * 127 + 79;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevec2() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 80;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_vec2() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 81;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevec3() {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 127 + 82;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse___();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse___();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_vec3() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 127 + 83;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse___();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse___();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse___() {
    let s0, s1, s2;

    const key = peg$currPos * 127 + 84;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c550.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c551); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c550.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c551); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse__() {
    let s0, s1, s2;

    const key = peg$currPos * 127 + 85;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c550.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c551); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c550.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_() {
    let s0;

    const key = peg$currPos * 127 + 86;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c552;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c553); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenbt_text() {
    let s0, s1;

    const key = peg$currPos * 127 + 87;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseroot_nbt_object();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c554(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_text() {
    let s0, s1;

    const key = peg$currPos * 127 + 88;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseroot_selector_object();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c554(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebegin_array() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 89;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c482;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c483); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebegin_object() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 90;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c555;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c556); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseend_array() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 91;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c486;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c487); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseend_object() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 92;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c557;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c558); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsename_separator() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 93;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c493;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_name_separator() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 94;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c490;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevalue_separator() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 95;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c484;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c485); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsews() {
    let s0, s1;

    const key = peg$currPos * 127 + 96;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parse_();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parse_();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenbt_value() {
    let s0;

    const key = peg$currPos * 127 + 97;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsefalse();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenbt_object();
        if (s0 === peg$FAILED) {
          s0 = peg$parsearray();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenbt_number();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestring_();
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_value() {
    let s0;

    const key = peg$currPos * 127 + 98;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsefalse();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselector_object();
        if (s0 === peg$FAILED) {
          s0 = peg$parseselector_number();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefalse() {
    let s0, s1;

    const key = peg$currPos * 127 + 99;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c496) {
      s1 = peg$c496;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c497); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c559();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetrue() {
    let s0, s1;

    const key = peg$currPos * 127 + 100;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c498) {
      s1 = peg$c498;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c499); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c560();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseroot_nbt_object() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 101;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c555;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c556); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenbt_member();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenbt_member();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c561(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenbt_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c561(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c562(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c557;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c558); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c563(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenbt_object() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 102;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenbt_member();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenbt_member();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c561(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenbt_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c561(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c562(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c563(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseroot_selector_object() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 103;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c555;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c556); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseselector_member();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseselector_member();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c561(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseselector_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c561(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c562(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c557;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c558); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c563(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_object() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 104;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseselector_member();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseselector_member();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c561(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseselector_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c561(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c562(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_object();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c563(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenbt_member() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 105;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c488.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c489); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parsestring_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsename_separator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenbt_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c564(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_member() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 106;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c488.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c489); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c488.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselector_name_separator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselector_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c564(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsearray() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 127 + 107;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenbt_value();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsenbt_value();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c565(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsenbt_value();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c565(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c566(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_array();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c567(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenbt_number() {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 127 + 108;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexp();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (peg$c568.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c569); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c570();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenumber() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 109;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexp();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c570();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseselector_number() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 110;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c571) {
        s2 = peg$c571;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c572); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenumber();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c570();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c571) {
        s1 = peg$c571;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c572); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c570();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c570();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedecimal_point() {
    let s0;

    const key = peg$currPos * 127 + 111;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c573;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c574); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedigit1_9() {
    let s0;

    const key = peg$currPos * 127 + 112;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c575.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c576); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsee() {
    let s0;

    const key = peg$currPos * 127 + 113;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c577.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c578); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexp() {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 127 + 114;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseminus();
      if (s2 === peg$FAILED) {
        s2 = peg$parseplus();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDIGIT();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefrac() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 115;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsedecimal_point();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseint() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 116;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsezero();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigit1_9();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseminus() {
    let s0;

    const key = peg$currPos * 127 + 117;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c579;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c580); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseplus() {
    let s0;

    const key = peg$currPos * 127 + 118;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c581;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c582); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsezero() {
    let s0;

    const key = peg$currPos * 127 + 119;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c583;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c584); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestring_() {
    let s0, s1, s2, s3;

    const key = peg$currPos * 127 + 120;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c585(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechar() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 127 + 121;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseunescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c586;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c587); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c588;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c589); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c590;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c591); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c592;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c593); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c594();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c595;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c596); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c597();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c598;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c599); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c600();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c601;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c602); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c603();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c604;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c605); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c606();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 117) {
                          s3 = peg$c607;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c608); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$currPos;
                          s6 = peg$parseHEXDIG();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseHEXDIG();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseHEXDIG();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseHEXDIG();
                                if (s9 !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c609(s4);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c610(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseescape() {
    let s0;

    const key = peg$currPos * 127 + 122;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c588;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c589); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsequotation_mark() {
    let s0;

    const key = peg$currPos * 127 + 123;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c586;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c587); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseunescaped() {
    let s0;

    const key = peg$currPos * 127 + 124;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c611.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c612); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDIGIT() {
    let s0;

    const key = peg$currPos * 127 + 125;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c613.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c614); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHEXDIG() {
    let s0;

    const key = peg$currPos * 127 + 126;
    const cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c615.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c616); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


    var fs = require('fs')
    var glob = require('glob')
    var workspacePath = require('./extension').workspacePath
    var activeFilePath = require('./extension').activeFilePath

    var results = {
      usage: null,
      type: null,
      args: []
    }
    
    function result(usage, type, args) {
      if (usage != null) results.usage = usage
      if (type != null) results.type = type
      if (args != null) results.args = results.args.concat(args)
    }

    function getFunctions(path) {
      var functions = []

      glob.sync(`${path}/**/functions/**/*.mcfunction`).forEach(file => {
        var relativePath = file.slice(path.length + 1);
        var namespace = relativePath.slice(0, relativePath.indexOf('/'))
        var relativeActiveFilePath = activeFilePath.slice(path.length + 1);

        var accessModifiers = ""
        var firstLine = fs.readFileSync(file).toString().split('\n')[0]
        if (firstLine.match(/#(public|internal|private)/)) {
          accessModifiers = firstLine.match(/#(public|internal|private)/)[1]
        } else {
          accessModifiers = "public"
        }

        switch (accessModifiers) {
          case "public":
            var match = relativePath.match(/[^\/]+\/data\/([^\/]+)\/functions\/(.+)\.mcfunction/)
            functions.push(`public ${match[1]}:${match[2]}`)
            break;
          case "internal":
            if (relativeActiveFilePath.startsWith(`${namespace}/`)) {
              var match = relativePath.match(/[^\/]+\/data\/([^\/]+)\/functions\/(.+)\.mcfunction/)
              functions.push(`internal ${match[1]}:${match[2]}`)
            }
            break;
          case "private":
            if (relativePath == relativeActiveFilePath) {
              var match = relativePath.match(/[^\/]+\/data\/([^\/]+)\/functions\/(.+)\.mcfunction/)
              functions.push(`private ${match[1]}:${match[2]}`)
            }
            break;
          default:
            break;
        }
      })

      glob.sync(`${path}/**/tags/functions/**/*.json`).forEach(file => {
        var match = file.slice(path.length + 1).match(/[^\/]+\/data\/([^\/]+)\/tags\/functions\/(.+)\.json/)
        functions.push(`#${match[1]}:${match[2]}`)
      })

      return functions
    }

    function getAdvancements(path) {
      var advancements = []

      glob.sync(`${path}/**/advancements/**/*.json`).forEach(file => {
        var match = file.slice(path.length + 1).match(/[^\/]+\/data\/([^\/]+)\/advancements\/(.+)\.json/)
        advancements.push(`${match[1]}:${match[2]}`)
      })

      return advancements
    }

    function getItems(path) {
      var items = []

      glob.sync(`${path}/**/tags/items/**/*.json`).forEach(file => {
        var match = file.slice(path.length + 1).match(/[^\/]+\/data\/([^\/]+)\/tags\/items\/(.+)\.json/)
        items.push(`#${match[1]}:${match[2]}`)
      })

      return items
    }

    function getBlocks(path) {
      var blocks = []

      glob.sync(`${path}/**/tags/blocks/**/*.json`).forEach(file => {
        var match = file.slice(path.length + 1).match(/[^\/]+\/data\/([^\/]+)\/tags\/blocks\/(.+)\.json/)
        blocks.push(`#${match[1]}:${match[2]}`)
      })

      return blocks
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

